# Introduction

JMAP is a protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification is for the generic mechanism of data synchronisation. Further specifications define the data models for different data types that may be synchronised via JMAP.

JMAP is designed to make efficient use of limited network resources. Multiple API calls may be batched in a single request to the server, reducing round trips and improving battery life on mobile devices. Push connections remove the need for polling, and an efficient delta update mechanism ensures a minimum of data is transferred.

JMAP is designed to be horizontally scalable to a very large number of users. This is facilitated by separate end points for users after login, the separation of binary and structured data, and a data model for sharing that does not allow data dependencies between accounts.

## Notational conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 [@!RFC2119] [@!RFC8174] when, and only when, they appear in all capitals, as shown here.

The underlying format used for this specification is JSON. Consequently, the terms "object" and "array" as well as the four primitive types (strings, numbers, booleans, and null) are to be interpreted as described in section 1 of [@!RFC8259]. Unless otherwise noted, all the property names and values are case sensitive.

Some examples in this document contain "partial" JSON documents used for illustrative purposes.  In these examples, three periods "..." are used to indicate a portion of the document that has been removed for compactness.

For compatibility with publishing requirements, line breaks have been inserted inside long JSON strings, with the following continuation lines indented. To form the valid JSON example, any line breaks inside a string must be replaced with a space, and any other white-space after the line break removed.

Unless otherwise specified, examples of API exchanges only show the *methodCalls* array of the Request object or the *methodResponses* array of the Response object. For compactness, the rest of the Request/Response object is omitted.

Type signatures are given for all JSON values in this document. The following conventions are used:

* `*` - The type is undefined (the value could be any type, although permitted
  values may be constrained by the context of this value).
* `String` - The JSON string type.
* `Number` - The JSON number type.
* `Boolean` - The JSON boolean type.
* `A[B]` – A JSON object where the keys are all of type `A`, and the values
  are all of type `B`.
* `A[]` – An array of values of type `A`.
* `A|B` – The value is either of type `A` or of type `B`.

Other types may also be given, with their representation defined elsewhere in this document.

Object properties may also have a set of attributes defined along with the type
signature. These have the following meanings:

* **server-set**: Only the server can set the value for this property. The
  client MUST NOT send this property when creating a new object of this type.
* **immutable**: The value MUST NOT change after the object is created.
* **default**: (This is followed by a JSON value). The value that will be used
  for this property if it is omitted in an argument, or when creating a new object of this type.

## The Id data type

All record ids are assigned by the server, and are immutable.

Where `Id` is given as a datatype, it means a `String` of at least 1 and maximum 255 octets in size, and MUST only contain characters from the "URL and Filename safe" Base 64 Alphabet, as defined in section 5 of [@!RFC4648], excluding the pad character (`=`). This means the allowed characters are the ASCII alphanumeric characters (`A-Za-z0-9`), hyphen (`-`), and underscore (`_`).

These characters are safe to use in almost any context (e.g., filesystems,
URIs, IMAP atoms). For maximum safety, servers SHOULD also follow defensive
allocation strategies to avoid creating risks where glob completion or data type
detection may be present (e.g., on filesystems or in spreadsheets). In
particular, it is wise to avoid:

* Ids starting with a dash
* Ids starting with digits
* Ids that contain only digits
* Ids that differ only by ASCII case (for example, A vs. a)
* the specific sequence of three characters "NIL" (because this sequence can be
  confused with the IMAP protocol expression of the null value)

A good solution to these issues is to prefix every id with a single
alphabetical character.

## The Int and UnsignedInt data types

Where `Int` is given as a data type, it means an integer in the range -2^53+1 <= value <= 2^53-1, the safe range for integers stored in a floating-point double, represented as a JSON `Number`.

Where `UnsignedInt` is given as a data type, it means an `Int` where the value MUST be in the range 0 <= value <= 2^53-1.

## The Date and UTCDate data types

Where `Date` is given as a type, it means a string in [@!RFC3339] *date-time* format. To ensure a normalised form, the *time-secfrac* MUST always be omitted if zero, and any letters in the string (e.g. "T" and "Z") MUST be upper-case. For example, `"2014-10-30T14:12:00+08:00"`.

Where `UTCDate` is given as a type, it means a `Date` where the *time-offset* component MUST be `Z` (i.e. it must be in UTC time). For example, `"2014-10-30T06:12:00Z"`.

## JSON as the data encoding format

JSON is a text-based data interchange format as specified in [@!RFC8259]. The I-JSON format defined in [@!RFC7493] is a strict subset of this, adding restrictions to avoid potentially confusing scenarios (for example, it mandates that an object MUST NOT have two members with the same name).

All data sent from the client to the server or from the server to the client (except binary file upload/download) MUST be valid I-JSON according to the RFC, and is therefore case-sensitive and encoded in UTF-8 ([@!RFC3629]).

## Terminology

### User

A user is a person accessing data via JMAP. A user has a set of permissions determining the data that they can see.

### Accounts

An account is a collection of data. A single account may contain an arbitrary set of data types, for example a collection of mail, contacts and calendars. Most JMAP methods take a mandatory *accountId* argument that specifies on which account the operations are to take place.

An account is not the same as a user, although it is common for a primary account to directly belong to the user. For example, you may have an account that contains data for a group or business, to which multiple users have access.

A single set of credentials may provide access to multiple accounts, for example if another user is sharing their work calendar with the authenticated user, or if there is a group mailbox for a support-desk inbox.

In the event of a severe internal error, a server may have to reallocate ids or do something else that violates standard JMAP data constraints for an account. In this situation, the data on the server is no longer compatible with cached data the client may have from before. The server MUST treat this as though the account has been deleted and then recreated with a new account id. Clients will then be forced to throw away any data with the old account id and refetch all data from scratch.

### Data types and records

JMAP provides a uniform interface for creating, retrieving, updating and deleting various types of objects. A **data type** is a collection of named, typed properties, just like the schema for a database table. Each instance of a data type is called a **record**.

The id of a record is immutable, and assigned by the server. The id MUST be unique among all records of the **same type** within the **same account**. Ids may clash across accounts, or for two records of different types within the same account.

## The JMAP API model

JMAP uses HTTP [@!RFC7230] to expose API, Push, Upload and Download resources. All HTTP requests MUST use the `https://` scheme ([@!RFC2818] HTTP over TLS).
All HTTP requests MUST be authenticated.

An authenticated client can fetch the user's JMAP Session object with details about the data and capabilities the server can provide as shown in section 2. The client may then exchange data with the server in the following ways:

1. The client may make an API request to the server to get or set structured data. This request consists of an ordered series of method calls. These are processed by the server, which then returns an ordered series of responses. This is described in sections 3 to 5.
2. The client may download or upload binary files from/to the server. This is detailed in section 6.
3. The client may connect to a push channel on the server, to be notified when data has changed. This is explained in section 7.

## Vendor-specific extensions

Individual services will have custom features they wish to expose over JMAP. This may take the form of extra data types and/or methods not in the spec, or extra arguments to JMAP methods, or extra properties on existing data types (which may also appear in arguments to methods that take property names).

The server can advertise custom extensions it supports by including the identifiers in the capabilities object. Identifiers for vendor extensions MUST be a URL belonging to a domain owned by the vendor, to avoid conflict. The URL SHOULD resolve to documentation for the changes the extension makes.

To ensure compatibility with clients that don't know about a specific custom extension, and for compatibility with future versions of JMAP, to use an extension the client MUST opt in by passing the appropriate capability identifier in the *using* array of the Request object, as described in section 3.2. The server MUST only follow the specifications that are opted-into and behave as though it does not implement anything else when processing a request.
