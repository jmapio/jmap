# The JMAP Session resource

To communicate with a JMAP server you need two things to start:

1. The URL for the JMAP Session resource. This may be requested directly from
   the user, or discovered automatically based on a username domain (see Service Autodiscovery section below).
2. Credentials to authenticate with. How to obtain credentials is out of scope
   for this specification.

An authenticated GET request to the JMAP Session resource MUST return the details about the data and capabilities the server can provide to the client given those credentials.

The response to a successful request is a JSON-encoded **JMAP Session** object. It has the following properties:

- **username**: `String`
  The username associated with the given credentials.
- **accounts**: `String[Account]`
  A map of **account id** to Account object for each account the user has access to.

    A single set of credentials may provide access to multiple accounts, for example if another user is sharing their mail with the logged in user, or if there is an account that contains data for a group or business.

    All data belongs to a single account. With the exception of a few explicit operations to copy data between accounts, all JMAP methods take an *accountId* argument that specifies on which account the operations are to take place. This argument is always optional; if not specified, the primary account for the capability that defines the data type is used. (Though if there is no primary account for that capability, an `accountNotFound` error will be returned.) All ids (other than account ids, of course) are only unique within their account.

    In the event of a severe internal error, a server may have to reallocate ids or do something else that violates standard JMAP data constraints. In this situation, the data on the server is no longer compatible with cached data the client may have from before. The server MUST treat this as though the account has been deleted and then recreated with a new account id. Clients will then be forced to throw away any data with the old account id and refetch all data from scratch.

    An **Account** object has the following properties:

    - **name**: `String`
      A user-friendly string to show when presenting content from this account, e.g. the email address representing the owner of the account.
    - **isReadOnly**: `Boolean`
      This is `true` if the entire account is read-only.
    - **hasDataFor**: `String[]`
      A list of specification URIs for the object types supported in this account.

        The server advertises the list of specifications it supports in general
        in the capabilities object, as defined below. If the specification
        includes new object type definitions, the server MUST include it the
        *hasDataFor* array if, and only if, the user may use those data types
        with this account.

        For example, you may have access to your own account with mail,
        calendars and contacts data, and also a shared account that only has
        contacts data (a  business address book for example). In this case the
        *hasDataFor* property on the first account would include something like
        `urn:ietf:params:jmap:mail`, `urn:ietf:params:jmap:calendars`,
        `urn:ietf:params:jmap:contacts`, while the second account would just
        have the last of these.

        Attempts to use the methods defined in a specification with one of the
        accounts that does not contain those data types are rejected with an
        *accountNotSupportedByMethod* error (see the Method-level errors
        section below).

- **primaryAccounts**: `String[String]`
  A map of capability URIs (as found in *hasDataFor*) to the account id to be considered the user's main or default account for data pertaining to that capability. If no account being returned belongs to the user, or in any other way there is no appropriate way to determine a default account, there MAY be no entry for a particular data profile name. `urn:ietf:params:jmap:core` SHOULD NOT be present.
- **capabilities**: `String[Object]`
  An object specifying the capabilities of this server. Each key is a URI for a specification supported by the server. The value for each of these keys is an object with further information about the server's capabilities in relation to that specification.

    The client MUST ignore any properties it does not understand.

    The capabilities object MUST include a property called `urn:ietf:params:jmap:core`. The value of this property is an object which MUST contain the following information on server capabilities:

    - **maxSizeUpload**: `Number`
      The maximum file size, in octets, that the server will accept for a single file upload (for any purpose).
    - **maxConcurrentUpload**: `Number`
      The maximum number of concurrent requests the server will accept to the upload endpoint.
    - **maxSizeRequest**: `Number`
      The maximum size, in octets, that the server will accept for a single
      request to the API endpoint.
    - **maxConcurrentRequests**: `Number`
      The maximum number of concurrent requests the server will accept to
      the API endpoint.
    - **maxCallsInRequest**: `Number`
      The maximum number of method calls the server will accept in a single request to the API endpoint. This MUST be greater than or equal to `32` to ensure clients can rely on the ability to make efficient network use.
    - **maxObjectsInGet**: `Number`
      The maximum number of objects that the client may request in a single `/get` type method call.
    - **maxObjectsInSet**: `Number`
      The maximum number of objects the client may send to create, update or destroy in a single `/set` type method call.
    - **collationAlgorithms**: `String[]`
      A list of identifiers for algorithms registered in the collation registry defined in [@!RFC4790] that the server supports for sorting when querying records.

    Future specifications will define their own properties on the capabilities object.

    Servers MAY advertise vendor-specific JMAP extensions. To avoid conflict, the identifiers for these MUST be a URI beginning with a domain owned by the vendor. Clients MUST opt in to any specifications it wishes to use (see "Making an API request").

- **apiUrl**: `String`
  The URL to use for JMAP API requests.
- **downloadUrl**: `String`
  The URL endpoint to use when downloading files (see the Download section of this spec), in [@!RFC6570] URI Template (level 1) format. The URL MUST contain variables called `blobId`, MAY contain a variables called `accountId` and SHOULD contain a variable called `name`.
- **uploadUrl**: `String`
  The URL endpoint to use when uploading files (see the Upload section of this spec), in [@!RFC6570] URI Template (level 1) format. The URL MAY contain a variable called `accountId`.
- **eventSourceUrl**: `String`
  The URL to connect to for push events (see the Push section of this spec).

To ensure future compatibility, other properties MAY be included on the JMAP Session object. Clients MUST ignore any properties they are not expecting.

## Example

In the following example JMAP Session object, the user has access to his own mail and contacts via JMAP, as well as read-only access to shared mail from another user:

    {
      "username": "john@example.com",
      "accounts": {
        "13824": {
          "name": "john@example.com",
          "isReadOnly": false,
          "hasDataFor": [
            "urn:ietf:params:jmap:mail",
            "urn:ietf:params:jmap:contacts"
          ]
        },
        "97813": {
          "name": "jane@example.com",
          "isReadOnly": true,
          "hasDataFor": [ "urn:ietf:params:jmap:mail" ]
        }
      },
      "primaryAccounts": {
        "urn:ietf:params:jmap:mail": "13824",
        "urn:ietf:params:jmap:contacts": "13824"
      },
      "capabilities": {
        "urn:ietf:params:jmap:core": {
          "maxSizeUpload": 50000000,
          "maxConcurrentUpload": 8,
          "maxSizeRequest": 10000000,
          "maxConcurrentRequest": 8,
          "maxCallsInRequest": 32,
          "maxObjectsInGet": 256,
          "maxObjectsInSet": 128,
          "collationAlgorithms": [
            "i;ascii-numeric",
            "i;ascii-casemap",
            "i;unicode-casemap"
          ]
        },
        ...
      },
      "apiUrl": "https://jmap.example.com/api/",
      "downloadUrl": "https://jmap.example.com/download/{accountId}/{blobId}/{name}",
      "uploadUrl": "https://jmap.example.com/upload/{accountId}/",
      "eventSourceUrl": "https://jmap.example.com/eventsource/"
    }

## Service Autodiscovery

There are two standardised autodiscovery methods in use for internet protocols:

- **DNS SRV** ([@!RFC2782], [@!RFC6186] and [@!RFC6764])
- **.well-known/servicename** ([@!RFC5785])

A JMAP-supporting host for the domain `example.com` SHOULD publish a SRV record `_jmap._tcp.example.com` which gives a *hostname* and *port* (usually port `443`). The JMAP Session resource is then `https://${hostname}[:${port}]/.well-known/jmap` (following any redirects).

If the client has a username in the form of an email address, it MAY use the domain portion of this to attempt autodiscovery of the JMAP server.
