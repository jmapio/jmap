# Binary data

Binary data is referenced by a *blobId* in JMAP, and uploaded/downloaded separately to the core API. A blobId does not have a name inherent to it, but this is normally given in the same object that contains the blobId. The data represented by a blobId is immutable.

Any blobId that exists within an account may be used when creating/updating another object in that account. For example, an Email type may have a blobId that represents the [@!RFC5322] representation of the message. A client could create a new Email object with an attachment and use this blobId, in effect attaching the old message to the new one. Similarly it could attach any existing existing attachment of an old message without having to download and upload it again.

When the client uses a blobId in a create/update, the server MAY assign a new blobId to refer to the same binary data from the new/updated object. If it does so, it MUST return any properties that contain a changed blobId in the created/updated response so the client gets the new ids.

A blob that is not referenced by a JMAP object (e.g. as a message attachment), MAY be deleted by the server to free up resources. Uploads (see below) are initially unreferenced blobs. To ensure interoperability:

* The server SHOULD use a separate quota for unreferenced blobs to the user's
  usual quota.
* This quota SHOULD be at least the maximum total size that a single
  object can reference on this server. For example, if supporting JMAP Mail, this should be at least the maximum total attachments size for a message.
* When an upload would take the user over quota, the server MUST delete
  unreferenced blobs in date order, oldest first, until there is room for the new blob.
* Except where quota restrictions force early deletion, an unreferenced blob
  SHOULD NOT be deleted for at least 24h from the time of upload; if reuploaded, the same blobId MAY be returned, but this SHOULD reset the expiry time.
* A blob MUST NOT be deleted during the method call which removed the last
  reference, so that a client can issue a create and a destroy that both reference the blob within the same method call.

## Uploading binary data

There is a single endpoint which handles all file uploads for an account, regardless of what they are to be used for. The JMAP Session object has an *uploadUrl* property in [@!RFC6570] URI Template (level 1) format, which MAY contain a variable called `accountId`. The client may use this template in combination with an *accountId* (if required in the template) to get the URL of the file upload resource.

To upload a file, the client submits an authenticated POST request to the file upload resource.

A successful request MUST return a single JSON object with the following properties as the response:

- **accountId**: `String`
  The id of the account used for the call.
- **blobId**: `String`,
  The id representing the binary data uploaded. The data for this id is immutable. The id *only* refers to the binary data, not any metadata.
- **type**: `String`
  The media type of the file (as specified in [@!RFC6838], section 4.2) as set in the Content-Type header of the upload HTTP request.
- **size**: `Number`
  The size of the file in octets.

If identical binary content to an existing blob in the account is uploaded, the existing blobId MAY be returned.

## Downloading binary data

The JMAP Session object has a *downloadUrl* property, which is in [@!RFC6570] URI Template (level 1) format. The URL MUST contain a variable called `blobId`, MAY contain a variable called `accountId`, and SHOULD contain a variable called `name`.

The client may use this template in combination with an *accountId* (if required in the URL template) and *blobId* to download any binary data (files) referenced by other objects. Since a blob is not associated with a particular name, the template SHOULD allow a name to be substituted in as well; the server will return this as the filename if it sets a `Content-Disposition` header.

To download the data the client makes an authenticated GET request to the download URL with the appropriate variables substituted in. The client SHOULD send an `Accept` header with the content type they would like the server to return for the file. The `Content-Type` header of a successful response SHOULD be set to the type as requested in the `Accept` header by the client, or `application/octet-stream` if unknown and no `Accept` header given.

## Blob/copy

Binary data may be copied **between** two different accounts using the *Blob/copy* method, rather than having to download then reupload on the client.

The *Blob/copy* method takes the following arguments:

- **fromAccountId**: `String|null`
  The id of the account to copy blobs from. If `null`, defaults to the primary account.
- **toAccountId**: `String|null`
  The id of the account to copy blobs to. If `null`, defaults to the primary account.
- **blobIds**: `String[]`
  A list of ids of blobs to copy to the other account.

The response has the following arguments:

- **fromAccountId**: `String`
  The id of the account emails were copied from.
- **toAccountId**: `String`
  The id of the account emails were copied to.
- **copied**: `String[String]|null`
  A map of the blob id in the *fromAccount* to the id for the blob in the *toAccount*, or `null` if none were successfully copied.
- **notCopied**: `String[SetError]|null`
  A map of blob id to a SetError object for each blob that failed to be copied, `null` if none.

The **SetError** may be any of the standard set errors that may be returned for a *create*.

The following additional errors may be returned instead of the *Blob/copy* response:

`fromAccountNotFound`: A *fromAccountId* was explicitly included with the request, but it does not correspond to a valid account.

`toAccountNotFound`: A *toAccountId* was explicitly included with the request, but it does not correspond to a valid account.
