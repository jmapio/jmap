# Tasks

A **Task** object contains information about a task. It is a JSTask object, as defined in [@!RFC8984]. However, as use-cases of task systems vary, this Section defines relevant parts of the JSTask object to implement the core task capability as well as several extensions to it. Only the core capability MUST be implemented by any task system. Implementers can choose the extensions that fit their own use case. For example, the recurrence extension allows having a Task object represent a series of recurring Tasks.

The core JSTask objects are Task, Link, Location, Relation and VirtualLocation. The core properties are JSTask's Metadata Properties (Section 4.1), What and Where Properties (Section 4.2), Task Properties (Section 5.2) as well as priority (Section 4.4.1), privacy (Section 4.4.3), replyTo (Section 4.4.4) and timeZone (Section 4.7.1).

On top of the JSTask properties, a Task object has the following additional core properties:

- **id**: `Id` (immutable; server-set)
  The id of the Task. This property is immutable. The id uniquely identifies a JSTask with a particular "uid" and "recurrenceId" within a particular account.

- **taskListId**: `Id`
  The TaskList id this task belongs to. A task MUST belong to exactly one TaskList at all times (until it is destroyed).

- **isDraft**: `Boolean`
  If true, this task is to be considered a draft. The server will not send any push notifications for alerts. This may only be set to true upon creation. Once set to false, the value cannot be updated to true. This property MUST NOT appear in "recurrenceOverrides".

- **utcStart**: `UTCDate`
  For simple clients that do not or cannot implement time zone support. Clients should only use this if also asking the server to expand recurrences, as you cannot accurately expand a recurrence without the original time zone.

    This property is calculated at fetch time by the server. Time zones are political, and they can and do change at any time. Fetching exactly the same property again may return different results if the time zone data has been updated on the server. Time zone data changes are not considered "updates" to the task.

    If set, the server will convert the UTC date to the task's current time zone using its current time zone data and store the local time.

    This is not included by default and must be requested explicitly.

    Floating tasks (tasks without a time zone) will be interpreted as per the time zone given as a Task/get argument.

    Note that it is not possible to accurately calculate the expansion of recurrence rules or recurrence overrides with the utcStart property rather than the local start time. Even simple recurrences such as "repeat weekly" may cross a daylight-savings boundary and end up at a different UTC time. Clients that wish to use "utcStart" are RECOMMENDED to request the server to expand recurrences (see Section XXX).

- **utcDue**: `UTCDate`
  The server calculates the end time in UTC from the start/timeZone/duration properties of the task. This is not included by default and must be requested explicitly. Like utcStart, this is calculated at fetch time if requested and may change due to time zone data changes. Floating tasks will be interpreted as per the time zone given as a Task/get argument.

- **sortOrder**: `UnsignedInt` (default: 0)
  Defines the sort order of a task when presented in the client's UI, so it
  is consistent between devices. The number MUST be an integer in the range
  0 <= sortOrder < 2^31.

    A task with a lower order should be displayed before a task with
    a higher order in any list of tasks in the client's UI. Tasks with equal order SHOULD be sorted in alphabetical order by name. The sorting should take into account locale-specific character order convention.

- **workflowStatus**: `String|null` (default: null)
  Specifies the status of the task. The allowed values are defined within `workflowStatuses`. If set, `progress` MUST null.

## Extensions to JSCalendar data types

This document extends one JSCalendar data type with new values.

### Relation

The keys for `relation` of the `Relation` object are extended by the following values:

- `depends-on`: This task depends on the referenced task in some manner. For example, a task may be blocked waiting on the other, referenced, task.
- `clone`: The referenced task was cloned from this task.
- `duplicate`: The referenced task is a duplicate of this task.
- `cause`: The referenced task was the cause for this task.

## Additional JSCalendar properties

This document defines two new core JSCalendar properties for the JSTask object.

### estimatedWork

Type: `UnignedInt|null` (default: null)

This specifies the estimated amount of work the task takes to complete. In Agile software development or Scrum, it is known as complexity or story points. The number has no actual unit, but a larger number means more work.

### impact

Type: `String|null` (default: null)

This specifies the impact or severity of the task, but does not say anything about the actual prioritization. Some examples are: minor, trivial, major or block. Usually, the priority of a task is based upon its impact and urgency.

## Properties similar in JMAP for Calendar

Attachments are described in [@!I-D.ietf-jmap-calendars], Section XXX.

## Recurrences extension

For the recurrence extension, the JSCalendar objects NDay and RecurrenceRule as well as the Recurrence Properties (Section 4.3) need to be supported.

The Task will require the following further property:

- **baseTaskId**: `Id|null` (immutable; server-set)
  This is only defined if the *id* property is a synthetic id, generated by the server to represent a particular instance of a recurring Task (see Section XXX). This property gives the id of the "real" Task this was generated from.

### Properties similar in JMAP for Calendar

Recurrences and updates to recurrences are described in [@!I-D.ietf-jmap-calendars], Section XXX

## Assignees extension

For the assignees extension, the JSCalendar object Participant as well as all Sharing and Scheduling Properties (Section 4.4) need to be supported.

The Task will require the following further property:

- **isOrigin**: `Boolean` (server-set)
  Is this the authoritative source for this task (i.e., does it control
  scheduling for this task; the task has not been added as a result of an
  invitation from another task management system)? This is `true` if, and only if:

    * the task's "replyTo" property is `null`; or
    * the account will receive messages sent to at least one of the methods
      specified in the "replyTo" property of the task.

Task objects MUST NOT have a "method" property as this is only used when representing iTIP [@!RFC5546] scheduling messages, not tasks in a data store.

### Per-user properties

In shared task lists, any top-level property registered in the IANA registry as "Is Per-User: yes" (see Section XXX) MUST be stored per-user. This includes:

- keywords
- color
- freeBusyStatus
- useDefaultAlerts
- alerts

The user may also modify these properties on a per-occurrence basis for recurring tasks; again, these MUST be stored per-user. Sharees initially receive the default value for each of these properties, not whatever value another user may have set.

When writing only per-user properties, the "updated" property MUST also be stored just for that user, if set. When fetching the "updated" property, the value to return is whichever is later of the per-user updated time or the updated time of the base task.

### Extensions to JSCalendar data types

The assignees extension extends one JSCalendar data type with new values.

#### Participants
The Participant object, as defined in [@!I-D.ietf-calext-jscalendar] Section 4.4.6 is used to represent participants. This spec extends the keys for the roles property with the following value:

- `assignee`: the participant is expected to work on the task

### Additional JSCalendar properties

The assignees extension defines three new JSCalendar properties for the JSTask object.

#### mayInviteSelf

Type: `Boolean` (default: false)

If `true`, any user that has access to the task may add themselves to it as a participant with the "attendee" role. This property MUST NOT be altered in the recurrenceOverrides; it may only be set on the master object.

This indicates the task will accept "party crasher" RSVPs via iTIP, subject to any other domain-specific restrictions, and users may add themselves to the task via JMAP as long as they have the mayRSVP permission for the task list.

#### mayInviteOthers

Type: `Boolean` (default: false)

If `true`, any current participant with the "attendee" role may add new participants with the "attendee" role to the task. This property MUST NOT be altered in the recurrenceOverrides; it may only be set on the master object.

#### hideAttendees

Type: `Boolean` (default: false)

If `true`, only the owners of the task may see the full set of participants. Other sharees of the task may only see the owners and themselves. This property MUST NOT be altered in the recurrenceOverrides; it may only be set on the master object.

## Alerts extension

For the alerts extension, the JSCalendar objects Alert, AbsoluteTrigger and OffsetTrigger as well as all Alerts Properties (Section 4.4) need to be supported.

## Multilingual extension

For the multilingual extension, the JSCalendar Multilingual Properties (Section 4.6) need to be supported.

## Custom Time Zones extension

For the custom time zones extension, the JSCalendar objects TimeZone and TimeZoneRule as well as all Time Zone Properties (Section 4.7) need to be supported.

## Task/get

This is the "CalendarEvent/get" method as described in [@!I-D.ietf-jmap-calendars], Section XXX.

TODO redefine this here. Similar to "TaskList/get" we only need to replace a few definitions. Copy+Paste most of the stuff.

## Task/changes

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2.

## Task/set

This is the "CalendarEvent/set" method as described in [@!I-D.ietf-jmap-calendars], Section XXX.

TODO copy+paste most stuff from "CalendarEvent/set". It should be fine to just reference patching.

## Task/copy

This is a standard "/copy" method as described in [@!RFC8620], Section 5.4.

## Task/query

This is the "CalendarEvent/query" method as described in [@!I-D.ietf-jmap-calendars], Section XXX.

TODO copy+paste most stuff from "CalendarEvent/query". Mainly filtering should be different.

## Task/queryChanges

This is a standard "/queryChanges" method as described in [@!RFC8620], Section 5.6.
