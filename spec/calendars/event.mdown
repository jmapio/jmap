# Calendar Events

A **CalendarEvent** object contains information about an event, or recurring series of events, that takes place at a particular time. It is a JSEvent object, as defined in [@!I-D.ietf-calext-jscalendar], with the following additional properties:

- **id**: `Id`
  The id of the CalendarEvent. This property is immutable. The id uniquely identifies a JSEvent with a particular "uid" and "recurrenceId" within a particular account.

- **calendarId**: `Id`
  The id of the Calendar this event belongs to.

- **isDraft**: `Boolean`
  If true, this event is to be considered a draft. The server will not send any scheduling messages to participants or send push notifications for alerts. This may only be set to true upon creation. Once set to false, the value cannot be updated to true. This property MUST NOT appear in "recurrenceOverrides".

- **utcStart**: `UTCDate`
  For simple clients that do not or cannot implement time zone support. Clients should only use this if also asking the server to expand recurrences, as you cannot accurately expand a recurrence without the original time zone.

    This property is calculated at fetch time by the server. Time zones are political and they can and do change at any time. Fetching exactly the same property again may return a different results if the time zone data has been updated on the server. Time zone data changes are not considered "updates" to the event.

    If set, server will convert to the event's current time zone using its current time zone data and store the local time.

    This is not included by default and must be requested explicitly.

    Floating events will be interpreted as per calendar's time zone property; or if not set, the the principal's time zone property.

    Note that it is not possible to accurately calculate the expansion of recurrence rules or recurrence overrides with the utcStart property rather than the local start time. Even simple recurrences such as "repeat weekly" may cross a daylight-savings boundary and end up at a different UTC time. Clients that wish to use "utcStart" are RECOMMENDED to request the server expand recurrences (see Section XXX).

- **utcEnd**: `UTCDate`
  The server calculates the end time in UTC from the start/timeZone/duration properties of the event. This is not included by default and must be requested explicitly. Like utcStart, this is calculated at fetch time if requested and may change due to time zone data changes.

CalendarEvent objects MUST NOT have a "method" property as this is only used when representing iTIP [@!RFC5546] scheduling messages, not events in a data store.

## Attachments

The Link object, as defined in [@!I-D.ietf-calext-jscalendar] Section 4.2.7, with a "rel" property equal to "enclosure" is used to represent attachments. Instead of mandating an "href" property, clients may set a "blobId" property instead to reference a blob of binary data in the account, as per [@!RFC8620] Section 6.

The server MUST translate this to an embedded `data:` URL [@!RFC2397] when sending the event to a system that cannot access the blob. Servers that support CalDAV access to the same data are recommended to expose these files as managed attachments [?@RFC8607].

## Per-user properties

In shared calendars where "shareesActAs" is "self", the following properties MUST be stored per-user:

- keywords
- color
- freeBusyStatus
- useDefaultAlerts
- alerts

The user may also modify these properties on a per-occurrence basis for recurring events; again, these MUST be stored per-user.

When writing per-user properties, the "updated" property MUST also be stored just for that user. When fetching the "updated" property, the value to return is whichever is later of the per-user updated time or the updated time of the master event.

## Recurring events

Events may recur, in which case they represent multiple occurrences or instances. The data store will either contain a single master event, containing a recurrence rule and/or recurrence overrides; or, a set of individual instances (when invited to specific occurrences only).

The client may ask the server to expand recurrences within a specific time range in "CalendarEvent/query". This will generate synthetic ids representing individual instances in the requested time range. The client can fetch and update the objects using these ids and the server will make the appropriate changes to the master event. Synthetic ids do not appear in "CalendarEvent/changes" responses; only the ids of events as actually stored on the server.

If the user is invited to specific instances then later added to the master event, "CalendarEvent/changes" will show the ids of all the individual instances being destroyed and the id for the master event being created.

## Updating for "this-and-future"

When editing a recurring event, you can either update the master event (affecting all instances unless overriden) or update an override for a specific occurrence. To update all occurrences from a specific point onwards, there are therefore two options: split the event, or update the master and override all occurrences before the split point back to their original values.

### Splitting an event

If the event is not scheduled (has no participants), the simplest thing to do is to duplicate the event, modifying the recurrence rules of the original so it finishes before the split point, and the duplicate so it starts at the split point. As per JSCalendar {TODO:ref} Section 4.1.3, a "next" and "first" relation MUST be set on the new objects respectively.

Splitting an event however is problematic in the case of a scheduled event, because the iTIP messages generated make it appear like two unrelated changes, which can be confusing.

### Updating the master and overriding previous

For scheduled events, a better approach is to avoid splitting and instead update the master event with the new property value for "this and future", then create overrides for all occurrences before the split point to restore the property to its previous value. Indeed, this may be the only option the user has permission to do if not an owner of the event.

Clients may choose to skip creating the overrides if the old data is not important, for example if the "alerts" property is being updated, it is probably not important to create overrides for events in the past with the alerts that have already fired.

## CalendarEvent/get

This is a standard "/get" method as described in [@!RFC8620], Section 5.1, with three extra arguments:

- **recurrenceOverridesBefore**: `UTCDate|null`
  If given, only recurrence overrides with a recurrence id before this date (when translated into UTC) will be returned.
- **recurrenceOverridesAfter**: `UTCDate|null`
  If given, only recurrence overrides with a recurrence id on or after this date (when translated into UTC) will be returned.
- **reduceParticipants**: `Boolean` (default: false)
  If true, only participants with the "owner" role or corresponding to the user's participant identities will be returned in the "participants" property of the master event and any recurrence overrides. If false, all participants will be returned.

A CalendarEvent object is a JSEvent object so may have arbitrary properties. If the client makes a "CalendarEvent/get" call with a null or omitted "properties" argument, all properties defined on the JSEvent object in the store are returned, along with the "id", "calendarId", and "isDraft" properties. The "utcStart" and "utcEnd" computed properties are only returned if explicitly requested. If either are requested, the "recurrenceOverrides" property MUST NOT be requested (recurrence overrides cannot be interpreted accurately with just the UTC times).

If specific properties are requested from the JSEvent and the property is not present on the object in the server's store, the server SHOULD return the default value if known for that property.

A requested id may represent a single instance of a recurring event if the client asked the server to expand recurrences in "CalendarEvent/query". In such a case, the server will resolve any overrides and set the appropriate "start" and "recurrenceId" properties on the CalendarEvent object returned to the client. The "recurrenceRule" and "recurrenceOverrides" properties MUST be returned as null if requested for such an event.

An event with the same uid/recurrenceId may appear in different accounts. Clients may coalesce the view of such events, but must be aware that the data may be different in the different accounts due to per-user properties, difference in permissions etc.

The "privacy" property of a JSEvent object allows the owner to override how sharees of the calendar see the event. If this is set to "private", when a sharee fetches the event the server MUST only return the basic time and metadata properties of the JSEvent object as specified in [@!I-D.ietf-calext-jscalendar], Section 4.4.3. If set to "secret", the server MUST behave as though the event does not exist for all users other than the owner.

## CalendarEvent/changes

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2.

## CalendarEvent/set

This is a standard "/set" method as described in [@!RFC8620], Section 5.3, with the following extra argument:

- **sendSchedulingMessages**: `Boolean` (default: true)
  If true then any changes to scheduled events will be sent to all the participants (if the user is an owner of the event) or back to the owners (otherwise). If false, the changes only affect this calendar and no scheduling messages will be sent.

For recurring events, an id may represent the master event or a specific instance. When the id for a specific instance is given, the server MUST process an update as an update to the recurrence override for that instance on the master event, and a destroy as removing just that instance.

Clients MUST NOT send an update/destroy to both the master event and a specific instance in a single "/set" request; the result of this is undefined.

Servers MUST enforce the user's permissions as returned in the "myRights" property of the Calendar object and reject changes with a `forbidden` SetError if not allowed.

The "privacy" property MUST NOT be set to anything other than "public" (the default) for events in a calendar that does not belong to the user (e.g. a shared team calendar). The server MUST reject this with an `invalidProperties` SetError.

The server MUST reject attempts to add events with a "participants" property where none of the participants correspond to one of the calendar's participant identities with a `forbidden` SetError.

If omitted on create, the server MUST set the following properties to an appropriate value:

- @type
- uid
- created
- updated

When modifying the event, the server MUST set the following properties if the server is the source of the event and the property is not explicitly set in the update:

- updated: set to the current time.
- sequence: increment by one, unless only per-user properties (see Section XXX)
  were changed.

The "created" property MUST NOT be updated after creation. The "sequence" property MUST NOT be set to a lower number than its current value. The "method" property MUST NOT be set. Any attempt to do these is rejected with a standard `invalidProperties` SetError.

If "utcStart" is set, this is translated into a "start" property using the server's current time zone information. It MUST NOT be set in addition to a "start" property and it cannot be set inside "recurrenceOverrides"; this MUST be rejected with an `invalidProperties` SetError.

Similarly, the "utcEnd" property is translated into a "duration" property if set. It MUST NOT be set in addition to a "duration" property and it cannot be set inside "recurrenceOverrides"; this MUST be rejected with an `invalidProperties` SetError.

The server does not automatically reset the "partipationStatus" or "expectReply" properties of a Participant if the event details change. Clients should either be intelligent about whether the change necessitates resending RSVP requests, or ask the user whether to send them.

The server MAY enforce that all events have an owner, for example in team calendars. If the user tries to create an event without participants in such a calendar, the server MUST automatically add a participant with the "owner" role corresponding to one of the user's "participantIdentities" for the calendar.

When creating an event with participants, or adding participants to an event that previously did not have participants, the server MUST set the "replyTo" property of the event if not present. Clients SHOULD NOT set the replyTo property for events when the user adds participants; the server is better positioned to add all the methods it supports to receive replies.

### Sending invitations and responses

Unless "sendSchedulingMessages" is false, the server MUST send appropriate iTIP [@!RFC5546] scheduling messages after successfuly creating, updating or destroying a calendar event.

When determining which scheduling messages to send, the server must first establish whether it is the *source* of the event. The server is the source if it will receive messages sent to any of the methods specified in the "replyTo" property of the event.

Messages are only sent to participants with a "scheduleAgent" property set to "server" or omitted. If the effective "scheduleAgent" property is changed:

- to "server" from something else: send messages to this participant as though
  the event had just been created.
- from "server" to something else: send messages to this participant as though
  the event had just been destroyed.
- any other change: do not send any messages to this participant.

The server may send the scheduling message via any of the methods defined on the sendTo property of a participant (if the server is the source) or the replyTo property of the event (otherwise) that it supports. If no supported methods are available, the server MUST reject the change with a `noSupportedScheduleMethods` SetError.

If the server is the source of the event it MUST NOT send messages to any participant corresponding to the participantIdentities of the calendar it is in.

If sending via iMIP [@?RFC6047], the server MAY choose to only send updates it deems "essential" to avoid flooding the recipient's email with changes they do not care about. For example, changes to the participationStatus of another participant, or changes to events solely in the past may be omitted.

#### REQUEST

When the server is the source for the event, a REQUEST message ([@!RFC5546], Section 3.2.2) is sent to all current participants if:

- The event is being created.
- Any non per-user property (see Section XXX) is updated on the event
  (including adding/removing participants), except if just modifying the recurrenceOverrides such that CANCEL messages are generated (see the next section).

Note, if the only change is adding an additional instance (not generated by the event's recurrence rule) to the recurrenceOverrides, this MAY be handled via sending an ADD message ([@!RFC5546], Section 3.2.4) for the single instance rather than a REQUEST message for the master. However, for interoperability reasons this is not recommended due to poor support in the wild for this type of message.

The server MUST ensure participants are only sent information about recurrence instances they are added to when sending scheduling messages for recurring events. If the participant is not invited to the master recurring event but only individual instances, scheduling messages MUST be sent for just those expanded occurrences individually. If a participant is invited to a recurring event, but removed via a recurrence override from a particular instance, any scheduling messages to this participant MUST return the instance as "excluded" (if it matches a recurrence rule for the event) or omit the instance entirely (otherwise).

#### CANCEL

When the server is the source for the event, a CANCEL message ([@!RFC5546], Section 3.2.5) is sent if:

- A participant is removed from either the master event or a single instance
  (the message is only sent to this participant; remaining participants will get a REQUEST, as described above).
- The event is destroyed.
- An exclusion is added to recurrenceOverrides to remove an instance generated
  by the event's recurrence rule.
- An additional instance (not generated by the event's recurrence rule) is
  removed from the recurrenceOverrides.

In each of the latter 3 cases, the message is sent to all participants.

#### REPLY

When the server is *not* the source for the event, a REPLY message ([@!RFC5546], Section 3.2.3) is sent for any participant corresponding to the participantIdentities of the calendar it is in if:

- The "participationStatus" property of the participant is changed.
- The event is destroyed and the participationStatus was not "needs-action".
- The event is created and the participationStatus is not "needs-action".
- An exclusion is added to recurrenceOverrides to remove an instance generated
  by the event's recurrence rule.
- An exclusion is removed from recurrenceOverrides (this is presumed to be the
  client undoing the deletion of a single instance).
- An instance not generated by the event's recurrence rule is removed from the
  recurrenceOverrides.
- An instance not generated by the event's recurrence rule is added to the
  recurrenceOverrides (this is presumed to be the client undoing the deletion of a single instance).

A reply is not sent when deleting an event where the current status is "needs-action" as if a junk calendar event gets added by an automated system, the user MUST be able to delete the event without sending a reply.


## CalendarEvent/copy

This is a standard "/copy" method as described in [@!RFC8620], Section 5.4.

## CalendarEvent/query

This is a standard "/query" method as described in [@!RFC8620], Section 5.5, with two extra arguments:

- **expandRecurrences**: `Boolean` (default: false)
  If true, the server will expand any recurring event. If true, the filter MUST be just a FilterCondition (not a FilterOperator) and MUST include both a before and after property. This ensures the server is not asked to return an infinite number of results.
- **timeZone**: `String`
  The time zone for before/after filter conditions (default: "Etc/UTC")

If expandRecurrences is true, a separate id will be returned for each instance of a recurring event that matches the query. This synthetic id is opaque to the client, but allows the server to resolve the id + recurrence id for "/get" and "/set" operations. Otherwise, a single id will be returned for matching recurring events that represents the entire event.

There is no necessary correspondence between the ids of different instances of the same expanded event.

The following additional error may be returned instead of the "CalendarEvent/query" response:

`cannotCalculateOccurrences`: the server cannot expand a recurrence required to return the results for this query.

### Filtering

A **FilterCondition** object has the following properties:

- **inCalendars**: `Id[]|null`
  A list of calendar ids. An event must be in ANY of these calendars to match the condition.
- **after**: `LocalDate|null`
  The end of the event, or any recurrence of the event, in the time zone given as the timeZone argument, must be after this date to match the condition.
- **before**: `LocalDate|null`
  The start of the event, or any recurrence of the event, in the time zone given as the timeZone argument, must be before this date to match the condition.
- **text**: `String|null`
  Looks for the text in the *title*, *description*, *locations* (matching name/description), *participants* (matching name/email) and any other textual properties of the event or any recurrence of the event.
- **title**: `String|null`
  Looks for the text in the *title* property of the event, or the overridden *title* property of a recurrence.
- **description**: `String|null`
  Looks for the text in the *description* property of the event, or the overridden *description* property of a recurrence.
- **location**: `String|null`
  Looks for the text in the *locations* property of the event (matching name/description of a location), or the overridden *locations* property of a recurrence.
- **owner**: `String|null`
  Looks for the text in the name or email fields of a participant in the *participants* property of the event, or the overridden *participants* property of a recurrence, where the participant has a role of "owner".
- **attendee**: `String|null`
  Looks for the text in the name or email fields of a participant in the *participants* property of the event, or the overridden *participants* property of a recurrence, where the participant has a role of "attendee".
- **participationStatus**: Must match. If owner/attendee condition, status must
  be of that participant. Otherwise any.
- **uid**: `String`
  The uid of the event is exactly the given string.

If expandRecurrences is true, all conditions must match against the same instance of a recurring event for the instance to match. If expandRecurrences is false, all conditions must match, but they may each match any instance of the event.

If zero properties are specified on the FilterCondition, the condition MUST always evaluate to `true`. If multiple properties are specified, ALL must apply for the condition to be `true` (it is equivalent to splitting the object into one-property conditions and making them all the child of an AND filter operator).

The exact semantics for matching `String` fields is **deliberately not defined** to allow for flexibility in indexing implementation, subject to the following:

- Text SHOULD be matched in a case-insensitive manner.
- Text contained in either (but matched) single or double quotes SHOULD be treated as a **phrase search**, that is a match is required for that exact sequence of words, excluding the surrounding quotation marks. Use `\"`, `\'` and `\\` to match a literal `"`, `'` and `\` respectively in a phrase.
- Outside of a phrase, white-space SHOULD be treated as dividing separate tokens that may be searched for separately in the event, but MUST all be present for the event to match the filter.
- Tokens MAY be matched on a whole-word basis using stemming (so for example a text search for `bus` would match "buses" but not "business").

### Sorting

The following properties MUST be supported for sorting:

- start
- uid
- recurrenceId

The following properties SHOULD be supported for sorting:

- created
- updated

## CalendarEvent/queryChanges

This is a standard "/queryChanges" method as described in [@!RFC8620], Section 5.6.

## Examples

TODO: Add example of how to get event by uid: query uid=foo and backref. Return multiple with recurrenceId set (user invited to specific instances of recurring event).
