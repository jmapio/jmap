# Calendars

A Calendar is a named collection of events. All events are associated with one, and only one, calendar.

A **Calendar** object has the following properties:

- **id**: `Id` (immutable; server-set)
  The id of the calendar.
- **role**: `String|null`
  Denotes the calendar has a special purpose. This MUST be one of the following:

    - `inbox`: This is the principal's default calendar; when the principal is
      invited to an event, this is the calendar to which it will be added by the server. There MUST NOT be more than one calendar with this role in an account.
    - `templates`: This calendar holds templates for creating new events. All
      events in this calendar MUST have the "isDraft" property set to true. Clients should not show this as a regular calendar to users, but may offer users to create new events by copying one of the events in here.

- **name**: `String`
  The user-visible name of the calendar. This may be any UTF-8 string of at least 1 character in length and maximum 255 octets in size.
- **description**: `String|null`
  An optional longer-form description of the calendar, to provide context in shared environments where users need more than just the name.
- **color**: `String`
  The color to be used when displaying events associated with the calendar. The value MUST be a case-insensitive color name taken from the CSS3 set of names,
  defined in Section 4.3 of W3C.REC-css3-color-20110607, or a CSS3 RGB color hex value.

    The color SHOULD have sufficient contrast to be used as text on a white background.

- **sortOrder**: `UnsignedInt` (default: 0)
  Defines the sort order of calendars when presented in the client's UI, so it
  is consistent between devices. The number MUST be an integer in the range
  0 <= sortOrder < 2^31.

    A calendar with a lower order should be displayed before a calendar with
    a higher order in any list of calendars in the client's UI. Calendars with equal order SHOULD be sorted in alphabetical order by name.  The sorting should take into account locale-specific character order convention.

- **isSubscribed**: `Boolean`
  Has the user indicated they wish to see this Calendar in their client? This SHOULD default to false for Calendars in shared accounts the user has access to and true for any new Calendars created by the user themself.

    If false, the calendar should only be displayed when the user explicitly
    requests it or to offer it for the user to subscribe to.

- **isVisible**: `Boolean` (default: true)
  Should the calendar's events be displayed to the user at the moment? Clients MUST ignore this property if isSubscribed is false.

- **includeInAvailability**: `String` (default: all)
  Should the calendar's events be used as part of availability calculation?
  This MUST be one of:

    - `all`: all events are considered.
    - `attending`: events the user is a confirmed or tentative participant of
      are considered.
    - `none`: all events are ignored.

- **defaultAlertsWithTime**: `Alert[]`
  The alerts to apply for events where showWithoutTime is false that have
  "useDefaultAlerts" set. See [@!I-D.ietf-calext-jscalendar], Section 4.5.2 for the definition of an Alert object.
- **defaultAlertsWithoutTime**: `Alert[]`
  The alerts to apply for events where showWithoutTime is true that have
  "useDefaultAlerts" set. See [@!I-D.ietf-calext-jscalendar], Section 4.5.2 for the definition of an Alert object.
- **timeZone**: `String|null`
  The time zone to use for events without a time zone when the server needs to resolve them into absolute time, e.g., for reminders, queries, or availability calculation. The value MUST be a time zone id from the IANA Time Zone Database. If `null`, the timeZone of the account's associated CalendarPrincipal will be used. Clients SHOULD use this as the default for new events in this calendar if set.
- **participantIdentities**: `ParticipantIdentity[]|null` (server-set)
  The identities that represent the user in this calendar.

    The first item in the array is the default. A **ParticipantIdentity** object has the following properties:

    - **name**: `String`
      The display name of the participant to use when adding this participant to an event, e.g. "Joe Bloggs".
    - **type**: `String`
      The method for sending scheduling messages to this identity, e.g. "imip"
    - **uri**: `String`
      The URI for sending scheduling messages to this identity, e.g.
      "mailto:foo@example.com"

    The user is an **owner** for an event if the CalendarEvent object has a   "participants" property, and one of the Participant objects has both:

    a) The "owner" role.
    b) A "sendTo" property that has "type" and "uri" equal to one of the
       ParticipantIdentity objects returned with the calendar.

- **shareWith**: `Id[CalendarRights]|null`
  A map of CalendarPrincipal id to rights for principals this calendar is shared with. The pricincipal to which this calendar belongs MUST NOT be in this set. This is null if the user requesting the object does not have the mayAdmin right, or if the calendar is not shared with anyone. May be modified only if the user has the mayAdmin right.

- **shareesActAs**: `String` (immutable; default server-dependent)
  This MUST be one of:

    - `secretary`
    - `self`

    If `self`, sharees act as themselves when using this calendar. If `secretary`, they act as the pricincipal to which this calendar belongs (secretary mode). If omitted, the default is server dependent. For example, it may be `self` if creating a calendar in a CalendarPrincipal representing a group, and `secretary` if creating a calendar for an individual. Users may attempt to set this on creation, but the server may reject with an `invalidProperties` error if the value is not permissible.

- **myRights**: `CalendarRights` (server-set)
  The set of access rights the user has in relation to this Calendar.


A **CalendarRights** object has the following properties:

- **mayReadFreeBusy**: `Boolean`
  The user may read the free-busy information for this calendar as part of a call to CalendarPrincipal/getAvailability (see Section XXX).
- **mayReadItems**: `Boolean`
  The user may fetch the events in this calendar.
- **mayAddItems**: `Boolean`
  The user may create new events on this calendar or move events to this calendar. For recurring events, they may add an override to add an occurrence, or remove an existing override that is excluding an occurrence.
- **mayUpdatePrivate**: `Boolean`
  The user may modify the following properties on all events in the calendar.
  If shareesActAs is "self", these properties MUST all be stored per-user, and changes do not affect any other user of the calendar. If shareesActAs is "secretary", the values are shared between all users.

    - keywords
    - color
    - freeBusyStatus
    - useDefaultAlerts
    - alerts

    The user may also modify the above on a per-occurrence basis for recurring events.

- **mayRSVP**: `Boolean`
  The user may modify the "participationStatus", "participationComment", "expectReply" and "scheduleAgent" properties of any Participant object that is represented in the "participantIdentities" property of the calendar.

    The user may also modify the above on a per-occurrence basis for recurring events.

- **mayUpdateOwn**: `Boolean`
  The user may modify an existing event on this calendar if either they are the owner of the event or the event has no owner.
- **mayUpdateAll**: `Boolean`
  The user may modify all existing events on this calendar.
- **mayRemoveOwn**: `Boolean`
  The user may delete an event or move it to a different calendar if either they are the owner of the event or the event has no owner. For recurring events, they may add an override to remove an occurrence.
- **mayRemoveAll**: `Boolean`
  The user may delete any event or move it to a different calendar. For recurring events, they may add an override to remove an occurrence.
- **mayAdmin**: `Boolean`
  The user may modify sharing for this calendar.
- **mayDelete**: `Boolean` (server-set)
  The user may delete the calendar itself. This property MUST be false if the account to which this calendar belongs has the *isReadOnly* property set to true.

## Per-user properties

The following properties MUST be stored per-user:

- name
- color
- sortOrder
- isVisible

## Calendar/get

This is a standard "/get" method as described in [@!RFC8620], Section 5.1. The *ids* argument may be `null` to fetch all at once.

If mayReadFreeBusy is the only permission the user has, the calendar MUST NOT be returned in Calendar/get and Calendar/query; it must behave as though it did not exist. The data is just used as part of CalendarPrincipal/getAvailability.

## Calendar/changes

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2.

## Calendar/set

This is a standard "/set" method as described in [@!RFC8620], Section 5.3 but with the following additional request argument:

- **onDestroyRemoveEvents**: `Boolean` (default: false)

  If false, any attempt to destroy a Calendar that still has CalendarEvents
  in it will be rejected with a `calendarHasEvent` SetError. If
  true, any CalendarEvents that were in the Calendar will be destroyed. This SHOULD NOT send scheduling messages to participants or create CalendarEventNotification objects.

The "role" and "shareWith" properties may only be set by users that have the mayAdmin right. The value is shared across all users, although users without the mayAdmin right cannot see the value.

Users can subscribe or unsubscribe to a calendar by setting the "isSubscribed" property. The server MAY forbid users from subscribing to certain calendars even though they have permission to see them, rejecting the update with a `forbidden` SetError.

The "timeZone", "includeInAvailability", "defaultAlertsWithoutTime" and "defaultAlertsWithTime" properties are stored per-user if the calendar "shareesActAs" value is "self", and may be set by any user who is subscribed to the calendar. Otherwise, these properties are shared, and may only be set by users that have the mayAdmin right.

The following properties may be set by anyone who is subscribed to the calendar and are all stored per-user:

- name
- color
- sortOrder
- isVisible

These properties are initially inherited from the owner's copy of the calendar, but if set by a sharee that user gets their own copy of the property; it does not change for any other principals. If the value of the property in the owner's calendar changes after this, it does not overwrite the sharee's value.

The following extra SetError types are defined:

For "destroy":

- **calendarHasEvent**: The Calendar has at least one CalendarEvent assigned to
  it, and the "onDestroyRemoveEvents" argument was false.
