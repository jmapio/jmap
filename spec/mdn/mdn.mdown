# Introduction

JMAP ([@!RFC8620] – JSON Meta Application Protocol) is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

MDN are defined in [@!RFC8098] and are used as "read receipts", "acknowledgements", or "receipt notifications".

A client can have to deal with MDN in different ways:

1. When receiving an email, an MDN can be sent to the sender. This specification defines an MDN/set method to cover this case.
2. When sending an email, an MDN can be requested. This must be done with the help of a header, and is already specified by [@!RFC8098] and can already be handled by [@!RFC8621] this way.
3. When receiving an MDN, the MDN could be related to an existing sent mail. This is already covered by [@!RFC8621] in the EmailSubmission object. Client could want to display detailed information about a received MDN. This specification defines a MDN/parse method to cover this case.

## Notational conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 [@!RFC2119] [@?RFC8174] when, and only when, they appear in all capitals, as shown here.

Type signatures, examples and property descriptions in this document follow the conventions established in section 1.1 of [@!RFC8620]. Data types defined in the core specification are also used in this document.

Servers MUST support all properties specified for the new data types defined in this document.

## Terminology

The same terminology is used in this document as in the core JMAP specification.

## Addition to the capabilities object

Capabilities are announced as part of the standard JMAP Session resource; see [@!RFC8620], section 2.

Support for the "MDN" data type and the "MDN/parse" method are represented by the capability "urn:ietf:params:jmap:mdn" being present in the "capabilities" property.
The capability "urn:ietf:params:jmap:mdn" being present in the "accountCapabilities" property of an account represents support for creating and sending MDN messages via the "MDN/set" method.
Servers that include the capability in one or more "accountCapabilities" properties MUST also include the property in the "capabilities" property.

The value of this "urn:ietf:params:jmap:mdn" property is an empty object in both the JMAP session "capabilities" property and an account's "accountCapabilities" property.

# MDN

An **MDN** object has the following properties:

- **forEmailId**: `Id|null`
  Email Id of the received email this MDN is relative to.
- **subject**: `String|null`
  Subject used as `Subject` header for this MDN.
- **textBody**: `String|null`
  Human readable part of the MDN, as plain text.
- **reportingUA**: `String|null`
  Name of the MUA creating this MDN. It is used to build the MDN Report part of the MDN.
- **disposition**: `Disposition`
  Object containing the diverse MDN disposition options.
- **mdnGateway**: `String|null` (server-set)
  Name of the gateway or MTA that translated a foreign (non-Internet) message disposition notification into this MDN.
- **originalRecipient**: `String|null` (server-set)
  Original recipient address as specified by the sender of the message for which the MDN is being issued.
- **finalRecipient**: `String` (server-set)
  Recipient for which the MDN is being issued.
- **originalMessageId**: `String|null` (server-set)
  Message-ID (the [@!RFC5322] header field, not the JMAP Id) of the message for which the MDN is being issued.
- **error**: `String[]|null` (server-set)
  Additional information in the form of text messages when the "error" disposition modifier appears.
- **extensionFields**: `String[String]|null` (server-set)
  Object where keys are extension-field names and values are extension-field values.

  A **Disposition** object has the following properties:

  - **actionMode**: `String`
    This MUST be one of the following strings: "manual-action" / "automatic-action"
  - **sendingMode**: `String`
    This MUST be one of the following strings: "MDN-sent-manually" / "MDN-sent-automatically"
  - **type**: `String`
    This MUST be one of the following strings: "deleted" / "dispatched" / "displayed" / "processed"

  See [@!RFC8098] for the exact meaning of these different fields.

## MDN/set

This is a standard “/set” method as described in [@!RFC8620] where only create is supported; any attempt to update/destroy MUST be rejected with a `forbidden` SetError.

The MDN/set method generates and sends an [@!RFC5322] message from an MDN object.

The client SHOULD NOT issue a MDN/set request if the message has the `$MDNSent` keyword set. In this case, the server MUST reject the submission with a standard `alreadyExists` SetError.

When sending the MDN, the server is in charge of generating the *originalRecipient*, *finalRecipient* and *originalMessageId* fields accordingly to the [@!RFC8098] specification.

After all items in the "MDN/set" invocation have been processed, a single implicit "Email/set" call MUST be made to set the "$MDNSent" keyword on "Email" objects referenced by "MDN" objects that have been successfully created (see [@!RFC3503] for more details). The response to this MUST be returned after the "MDN/set" response.

## MDN/parse

This method allows a client to parse blobs as [@!RFC5322] messages to get MDN objects. This can be used to parse and get detailed information about blobs referenced in the *mdnBlobIds* of the EmailSubmission object, or any email the client could expect to be an MDN.

The *forEmailId* property can be null or missing if the *originalMessageId* property is missing or not referencing an existing email.

The MDN/parse method takes the following arguments:

- **accountId**: `Id`
  The id of the account to use.
- **blobIds**: `Id[]`
  The ids of the blobs to parse.

The response has the following arguments:

- **accountId**: `Id`
  The id of the account used for the call.
- **parsed**: `Id[MDN]|null`
  A map of blob id to parsed MDN representation for each successfully parsed blob, or null if none.
- **notParsable**: `Id[]|null`
  A list of ids given that corresponded to blobs that could not be parsed as MDNs, or null if none.
- **notFound**: `Id[]|null`
  A list of blob ids given that could not be found, or null if none.

# Samples

## Sending an MDN for a received email

A client can use the following request to send an MDN back to the sender:

    [[ "MDN/set", {
      "accountId": "ue150411c",
      "create": {
        "k1546": {
          "forEmailId": "Md45b47b4877521042cec0938",
          "subject": "Read receipt for: World domination",
          "textBody": "This receipt shows that the email has been 
              displayed on your recipient's computer. There is no 
              guaranty it has been read or understood.",
          "reportingUA": "linagora.com; OpenPaaS",
          "disposition": {
            "actionMode": "manual-action",
            "sendingMode": "MDN-sent-manually",
            "type": "displayed"
          }
        }
      }
    }, "0" ]]

If the email id matches an existing email without the `$MDNSent` keyword, the server can answer:

    [[ "MDN/set", {
      "accountId": "ue150411c",
      "oldState": "012421s6-8nrq-4ps4-n0p4-9330r951ns21",
      "newState": "355421f6-8aed-4cf4-a0c4-7377e951af36",
      "created": {
        "k1546": {
          "finalRecipient": "rfc822; john@example.com",
          "originalMessageId": "<1521557867.2614.0.camel@apache.org>"
        }
      }
    }, "0" ],


## Asking for MDN when sending an email

This is done with the [@!RFC8621] "Email/set" *create* method.

    [[ "Email/set", {
      "accountId": "ue150411c",
      "create": {
        "k1546": {
          "mailboxIds": {
            "2ea1ca41b38e": true
          },
          "keywords": {
            "$seen": true,
            "$draft": true
          },
          "from": [{
            "name": "Joe Bloggs",
            "email": "joe@example.com"
          }],
          "to": [{
            "name": "John",
            "email": "john@example.com"
          }],
          "header:Disposition-Notification-To": "joe@example.com",
          "subject": "World domination",
          ...
        }
      }
    }, "0" ]]

Note the specified `Disposition-Notification-To` header indicating where to send MDN back (usually the sender of the email).

## Parsing a received MDN

The client issues a parse request:

    [[ "MDN/parse", {
      "accountId": "ue150411c",
      "blobIds: [ "0f9f65ab-dc7b-4146-850f-6e4881093965" ]
    }, "0" ]]

The server responds:

    [[ "MDN/parse", {
      "accountId": "ue150411c",
      "parsed": {
        "0f9f65ab-dc7b-4146-850f-6e4881093965": {
          "forEmailId": "Md45b47b4877521042cec0938",
          "subject": "Read receipt for: World domination",
          "textBody": "This receipt shows that the email has been 
              displayed on your recipient's computer. There is no 
              guaranty it has been read or understood.",
          "reportingUA": "linagora.com; OpenPaaS",
          "disposition": {
            "actionMode": "manual-action",
            "sendingMode": "MDN-sent-manually",
            "type": "displayed"
          }
          "finalRecipient": "rfc822; john@example.com",
          "originalMessageId": "<1521557867.2614.0.camel@apache.org>"
        }
      }
    }, "0" ]]

# IANA Considerations

## JMAP Capability Registration for "mdn"

IANA will register the "mdn" JMAP Capability as follows:

Capability Name: `urn:ietf:params:jmap:mdn`

Specification document: this document

Intended use: common

Change Controller: IETF

Security and privacy considerations: this document, section 5.

# Security considerations

The same considerations regarding MDN (see [@!RFC8098] and [@!RFC3503]) apply to this document.
