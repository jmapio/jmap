## Threads

Replies are grouped together with the original message to form a thread. In JMAP, a thread is simply a flat list of messages, ordered by date. Every message MUST belong to a thread, even if it is the only message in the thread.

The JMAP spec does not require the server to use any particular algorithm for determining whether two messages belong to the same thread, however there is a recommended algorithm in the [implementation guide](server.html). As such, a server may choose not to support threading and just behave as though every message belongs to its own thread. It MUST still support all the methods though.

If messages are delivered out of order for some reason, a user may receive two messages in the same thread but without headers that associate them with each other. The arrival of a third message in the thread may provide the missing references to join them all together into a single thread. Since the `threadId` of a message is immutable, if the server decides to merge the threads, it MUST handle this by deleting and reinserting (with a new message id) the messages that change threadId.

A **Thread** object has the following properties:

- **id**: `String`
  The id of the thread.
- **messageIds**: `String[]`
  The ids of the messages in the thread, sorted such that:
  - Any message with `isDraft == true` and an *inReplyToMessageId* property that corresponds to another message in the thread comes immediately after that message in the sort order.
  - Other than that, everything is sorted in date order (the same as the *date* property on the Message object), oldest first.

### getThreads

Threads can only be fetched explicitly by id. To fetch threads, make a call to *getThreads*. It takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If not given, defaults to the primary account.
- **ids**: `String[]`
  An array of ids for the threads to fetch.
- **fetchMessages**: `Boolean|null`
  If true, after outputting a *threads* response, an implicit call will be made to *getMessages* with a list of all message ids in the returned threads as the *ids* argument, and the *fetchMessageProperties* argument as the *properties* argument. If `false` or `null`, no implicit call will be made.
- **fetchMessageProperties**: `String[]|null`
  The list of properties to fetch on any fetched messages. See *getMessages* for a full description.

The response to *getThreads* is called *threads*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for the call.
- **state**: `String`
  A string encoding the current state on the server. This string will change
  if any threads change (that is, new messages arrive, or messages are deleted, as these are the only two events that change thread memebership). It can be passed to *getThreadUpdates* to efficiently get the list of changes from the previous state.
- **list**: `Thread[]`
  An array of Thread objects for the requested thread ids. This may not be in the same order as the ids were in the request.
- **notFound**: `String[]|null`
  An array of thread ids requested which could not be found, or `null` if all ids were found.

The following errors may be returned instead of the `threads` response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNoMail`: Returned if the *accountId* given corresponds to a valid account, but does not contain any mail data.

`invalidArguments`: Returned if the request does not include one of the required arguments, or one of the arguments is of the wrong type, or otherwise invalid. A *description* property MAY be present on the response object to help debug with an explanation of what the problem was.

Example of a successful request:

    [ "getThreads", {
      "ids": ["f123u4", "f41u44"],
      "fetchMessages": false,
      "fetchMessageProperties": null
    }, "#1" ]

and response:

    [ "threads", {
      "state": "f6a7e214",
      "list": [
        {
          "id": "f123u4",
          "messageIds": [ "eaa623", "f782cbb"]
        },
        {
          "id": "f41u44",
          "messageIds": [ "82cf7bb" ]
        }
      ],
      "notFound": null
    }, "#1" ]


### getThreadUpdates

When messages are created or deleted, new threads may be created, or the set of messages belonging to an existing thread may change. If a call to *getThreads* returns with a different *state* string in the response to a previous call, the state of the threads has changed on the server and the client needs to work out which part of its cache is now invalid.

The *getThreadUpdates* call allows a client to efficiently update the state of any cached threads to match the new state on the server. It takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If not given, defaults to the primary account.
- **sinceState**: `String`
  The current state of the client. This is the string that was returned as the *state* argument in the *threads* response. The server will return the changes made since this state.
- **maxChanges**: `Number|null`
  The maximum number of changed threads to return in the response. See below for a more detailed description.
- **fetchRecords**: `Boolean|null`
  If `true`, after outputting a *threadUpdates* response, an implicit call will be made to *getThreads* with the *changed* property of the response as the *ids* argument, and *fetchMessages* equal to `false`.

If there are too many changes on the server and the client is only keeping a partial cache, it may be more efficient for the client to just invalidate its entire cache and fetch what it needs on demand. The *maxChanges* argument allows the client to tell the server the maximum number of changes to send back. The server will return a `tooManyChanges` error if the number of changes exceeds the *maxChanges* argument. The client can either invalidate its Thread cache or perhaps try again with a higher *maxChanges* argument but `fetchRecords: false`.

The response to *getThreadUpdates* is called *threadUpdates*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for the call.
- **oldState**: `String`
  This is the *sinceState* argument echoed back; the state from which the server is returning changes.
- **newState**: `String`
  This is the state the client will be in after applying the set of changes to the old state.
- **changed**: `String[]`
  An array of thread ids where the list of messages within the thread has
  changed between the old state and the new state, and the thread currently has at least one message in it.
- **removed**: `String[]`
  An array of thread ids where the list of messages within the thread has changed since the old state, and there are now no messages in the thread.

If a thread has been modified AND deleted since the oldState, the server SHOULD just return the id in the *removed* response, but MAY return it in the changed response as well. If a thread has been created AND deleted since the oldState, the server should remove the thread id from the response entirely, but MAY include it in the *removed* response, and optionally the *changed* response as well.

The following errors may be returned instead of the *threadUpdates* response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNoMail`: Returned if the *accountId* given corresponds to a valid account, but does not contain any mail data.

`invalidArguments`: Returned if the request does not include one of the required arguments, or one of the arguments is of the wrong type, or otherwise invalid. A *description* property MAY be present on the response object to help debug with an explanation of what the problem was.

`tooManyChanges`: Returned if there are more changes the the client's *maxChanges* argument. The client MAY retry with a higher max changes, (but with `fetchRecords:false` perhaps to limit the data transfer). Alternatively, the client can invalidate its Thread cache.

`cannotCalculateChanges`: Returned if the server cannot calculate the changes from the state string given by the client. Usually due to the client's state being too old. The client MUST invalidate its Thread cache.
