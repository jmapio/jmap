# Introduction

JMAP (RFC XXXX) is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification defines a data model for mail over JMAP.

## Notational conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [@!RFC2119].

Type signatures, examples and property descriptions in this document follow the conventions established in Section 1.1 of RFC XXXX. Data types defined in the core specification are also used in this document.

## Terminology

The same terminology is used in this document as in the core JMAP specification.

## Additions to the capabilities object

The capabilities object is returned as part of the standard JMAP Session object; see RFC XXXX, section 2.

This document defines three additional capability URIs.

### urn:ietf:params:jmap:mail

This represents support for the Mailbox, Thread, Email, and SearchSnippet data types and associated API methods. The value of this property is an object which MUST contain the following information on server capabilities:

- **maxMailboxesPerEmail**: `PositiveInt|null`
  The maximum number of mailboxes that can be can assigned to a single email. This MUST be an integer >= 1, or `null` for no limit (or rather, the limit is always the number of mailboxes in the account).
- **maxMailboxDepth**: `PositiveInt|null`
  The maximum depth of the mailbox hierarchy (i.e. one more than the maximum number of ancestors a mailbox may have), or `null` for no limit.
- **maxSizeMailboxName**: `PositiveInt`
  The maximum length, in (UTF-8) octets, allowed for the name of a mailbox. This MUST be at least 100, although it is recommended servers allow more.
- **maxSizeAttachmentsPerEmail**: `PositiveInt`
  The maximum total size of attachments, in octets, allowed for a single email. A server MAY still reject import or creation of emails with a lower attachment size total (for example, if the body includes several megabytes of text, causing the size of the encoded MIME structure to be over some server-defined limit).

    Note, this limit is for the sum of unencoded attachment sizes. Users are generally not knowledgeable about encoding overhead etc., nor should they need to be, so marketing and help materials normally tell them the "max size attachments". This is the unencoded size they see on their hard drive, and so this capability matches that and allows the client to consistently enforce what the user understands as the limit.

    The server may separately have a limit for the total size of the RFC5322 message, which will have attachments Base64 encoded and message headers and bodies too. For example, suppose the server advertises `maxSizeAttachmentsPerEmail: 50000000` (50 MB). The enforced server limit may be for an RFC5322 size of 70000000 octets (70 MB). Even with Base64 encoding and a 2 MB HTML body, 50 MB attachments would fit under this limit.

- **emailsListSortOptions**: `String[]`
  A list of all the email properties the server supports sorting by. This MAY include properties the client does not recognise (for example custom properties specified in a vendor extension). Clients MUST ignore any unknown properties in the list.

### urn:ietf:params:jmap:submission

This represents support for the Identity and MessageSubmission data types and associated API methods. The value of this property is an object which MUST contain the following information on server capabilities:

- **maxDelayedSend**: `PositiveInt`
  The number in seconds of the maximum delay the server supports in sending
  (see the EmailSubmission object description). This is `0` if the server does
  not support delayed send.
- **submissionExtensions**: `String[String[]]`
  A JMAP implementation that talks to a Submission [@!RFC6409] server SHOULD have a configuration setting that allows an administrator to expose a new submission EHLO capability in this field. This allows a JMAP server to gain access to a new submission extension without code changes. By default, the JMAP server should hide EHLO capabilities that are to do with the transport mechanism and thus are only relevant to the JMAP server (for example PIPELINING, CHUNKING, or STARTTLS).

    Each key in the object is the *ehlo-name*, and the value is a list of *ehlo-args*.

    Examples of Submission extensions to include:

    - FUTURERELEASE ([@!RFC4865])
    - SIZE ([@!RFC1870])
    - DSN ([@!RFC3461])
    - DELIVERYBY ([@!RFC2852])
    - MT-PRIORITY ([@!RFC6710])

    A JMAP server MAY advertise an extension and implement the semantics of that extension locally on the JMAP server even if a submission server used by JMAP doesn't implement it.

    The full IANA registry of submission extensions can be found at <https://www.iana.org/assignments/mail-parameters/mail-parameters.xhtml#mail-parameters-2>.

### urn:ietf:params:jmap:vacationresponse

This represents support for the VacationResponse data type and associated API methods. The value of this property is an empty object.

## Data type support in different accounts

The server MUST include the appropriate capability strings in the *hasDataFor* property of any account with which the user may use the data types represented by that URI. Supported data types may differ between accounts the user has access to. For example, in the user's personal account they may have access to all three sets of data, but in a shared account they may only have data for `urn:ietf:params:jmap:mail`. This means they can access Mailbox/Thread/Email data in the shared account but are not allowed to send as that account (and so do not have access to Identity/MessageSubmission objects) or view/set its vacation response.

## Push

Servers MUST support the standard JMAP push mechanisms to receive notifications when the state changes for any of the types defined in this specification.

In addition, servers MUST support a pseudo-type called "EmailDelivery" in the push mechanisms. The state string for this MUST change whenever a new Email is added to the store, but SHOULD NOT change upon any other change to the Email objects.

Clients in battery constrained environments may wish to delay fetching changes initiated by the user, but fetch new messages immediately so they can notify the user.

## Ids

If a JMAP Mail server also provides an IMAP interface to the data and supports [@!RFC8474] IMAP Extension for Object Identifiers, the ids SHOULD be the same for mailbox, thread, and email objects in JMAP.
