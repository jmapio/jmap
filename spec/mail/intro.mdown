# Introduction

JMAP is a generic protocol for synchronising data, such as mail, calendars or contacts, between a client and a server. It is optimised for mobile and web environments, and aims to provide a consistent interface to different data types.

This specification defines a data model for synchronising mail between a client and a server using JMAP.

## Notational Conventions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [@!RFC2119].

The underlying format used for this specification is JSON. Consequently, the terms "object" and "array" as well as the four primitive types (strings, numbers, booleans, and null) are to be interpreted as described in Section 1 of [@!RFC7159].

Some examples in this document contain "partial" JSON documents used for illustrative purposes.  In these examples, three periods "..." are used to indicate a portion of the document that has been removed for compactness.

Types signatures are given for all JSON objects in this document. The following conventions are used:

* `Boolean|String` – The value is either a JSON `Boolean` value, or a JSON `String` value.
* `Foo` – Any name that is not a native JSON type means an object for which the properties (and their types) are defined elsewhere within this document.
* `Foo[]` – An array of objects of type `Foo`.
* `String[Foo]` – A JSON `Object` being used as a map (associative array), where all the values are of type `Foo`.

## Terminology

The same terminology is used in this document as in the core JMAP specification.

## Addition to the capabilities object

The capabilities object is returned as part of the standard JMAP authentication response; see the JMAP spec. Servers supporting *this* specification MUST add a property called `{TODO: URI for this spec}` to the capabilities object. The value of this property is an object which SHOULD contain the following information on server capabilities:

- **maxMailboxesPerMessage**: `Number|null`
  The maximum number of mailboxes that can be can assigned to a single message. This MUST be an integer >= 1, or `null` for no limit (or rather, the limit is always the number of mailboxes in the account).
- **maxSizeMessageAttachments**: `Number`
  The maximum total size of attachments, in bytes, allowed for messages. A server MAY still reject messages with a lower attachment size total (for example, if the body includes several megabytes of text, causing the size of the encoded MIME structure to be over some server-defined limit).
- **maxDelayedSend**: `Number`
  The number in seconds of the maximum delay the server supports in sending
  (see the MessageSubmission object). This is `0` if the server does not support
  delayed send.
- **messageListSortOptions**: `String[]`
  A list of all the message properties the server supports for sorting by. This MAY include properties the client does not recognise (for example custom properties specified in a vendor extension). Clients MUST ignore any unknown properties in the list.
- **submissionExtensions**: `String[String[]]`
  A JMAP implementation that talks to a Submission [@!RFC6409] server SHOULD have a configuration setting that allows an administrator to expose a new submission EHLO capability in this field. This allows a JMAP server to gain access to a new submission extension without code changes. By default, the JMAP server should show only known safe-to-expose EHLO capabilities in this field, and hide EHLO capabilites that are only relevant to the JMAP server.

    Each key in the object is the *ehlo-name*, and the value is a list of *ehlo-args*.

    Examples of safe-to-expose Submission extensions include:

    - FUTURERELEASE ([@!RFC4865])
    - SIZE ([@!RFC1870])
    - DSN ([@!RFC3461])
    - DELIVERYBY ([@!RFC2852])
    - MT-PRIORITY ([@!RFC6710])

    A JMAP server MAY advertise an extension and implement the semantics of that extension locally on the JMAP server even if a submission server used by JMAP doesn't implement it.

    The full IANA registry of submission extensions can be found at https://www.iana.org/assignments/mail-parameters/mail-parameters.xhtml#mail-parameters-2
