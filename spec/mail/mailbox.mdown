# Mailboxes

A mailbox represents a named set of emails. This is the primary mechanism for organising emails within an account. It is analogous to a folder or a label in other systems. A mailbox may perform a certain role in the system; see below for more details.

For compatibility with IMAP, an email MUST belong to one or more mailboxes. The email id does not change if the email changes mailboxes.

A **Mailbox** object has the following properties:

- **id**: `String` (immutable; server-set)
  The id of the mailbox.
- **name**: `String`
  User-visible name for the mailbox, e.g. "Inbox". This may be any Net-Unicode string ([@!RFC5198]) of at least 1 character in length and maximum 255 octets in size. Servers MUST forbid sibling Mailboxes with the same name. Servers MAY reject names that violate server policy (e.g., names containing slash (/) or control characters).
- **parentId**: `String|null` (default: null)
  The mailbox id for the parent of this mailbox, or `null` if this mailbox is at the top level. Mailboxes form acyclic graphs (forests) directed by the child-to-parent relationship. There MUST NOT be a loop.
- **role**: `String|null` (default: null)
  Identifies mailboxes that have a particular common purpose (e.g. the "inbox"), regardless of the *name* (which may be localised). This value is shared with IMAP (exposed in IMAP via the [@!RFC6154] SPECIAL-USE extension). However, unlike in IMAP, a mailbox may only have a single role, and no two mailboxes in the same account may have the same role.

    The value MUST be one of the mailbox attribute names listed in the [IANA Mailbox Name Attributes Registry](TODO), as established in [TODO:being established in EXTRA], converted to lower-case. New roles may be established here in the future.

    An account is not required to have mailboxes with any particular roles.

- **sortOrder**: `Number` (default: 0)
  Defines the sort order of mailboxes when presented in the client's UI, so it
  is consistent between devices. The number MUST be an integer in the range
  0 <= sortOrder < 2^31.

    A mailbox with a lower order should be displayed before a mailbox with a higher order (that has the same parent) in any mailbox listing in the client's UI. Mailboxes with equal order SHOULD be sorted in alphabetical order by name. The sorting SHOULD take into account locale-specific character order convention.
- **totalEmails**: `Number` (server-set)
  The number of emails in this mailbox.
- **unreadEmails**: `Number` (server-set)
  The number of emails in this mailbox that have neither the `$seen` keyword nor the `$draft` keyword.
- **totalThreads**: `Number` (server-set)
  The number of threads where at least one email in the thread is in this mailbox.
- **unreadThreads**: `Number` (server-set)
  The number of threads where at least one email in the thread has neither the `$seen` keyword nor the `$draft` keyword AND at least one email in the thread is in this mailbox (but see below for special case handling of Trash). Note, the unread email does not need to be the one in this mailbox.
- **myRights**: `MailboxRights` (server-set)
  The set of rights (ACLs) the user has in relation to this mailbox. A *MailboxRights* object has the following properties:

    - **mayReadItems**: `Boolean`
      If true, the user may use this mailbox as part of a filter in a *Email/query* call and the mailbox may be included in the *mailboxIds* set of *Email* objects. If a sub-mailbox is shared but not the parent mailbox, this may be `false`. Corresponds to IMAP ACLs `lr`.
    - **mayAddItems**: `Boolean`
      The user may add mail to this mailbox (by either creating a new email or moving an existing one). Corresponds to IMAP ACL `i`.
    - **mayRemoveItems**: `Boolean`
      The user may remove mail from this mailbox (by either changing the mailboxes of an email or deleting it). Corresponds to IMAP ACLs `te`.
    - **maySetSeen**: `Boolean`
      The user may add or remove the `$seen` keyword to/from an email. If an email belongs to multiple mailboxes, the user may only modify `$seen` if **all** of the mailboxes have this permission. Corresponds to IMAP ACL `s`.
    - **maySetKeywords**: `Boolean`
      The user may add or remove any keyword *other than* `$seen` to/from an email. If an email belongs to multiple mailboxes, the user may only modify keywords if **all** of the mailboxes have this permission. Corresponds to IMAP ACL `w`.
    - **mayCreateChild**: `Boolean`
      The user may create a mailbox with this mailbox as its parent. Corresponds to IMAP ACL `k`.
    - **mayRename**: `Boolean`
      The user may rename the mailbox or make it a child of another mailbox. Corresponds to IMAP ACL `x`.
    - **mayDelete**: `Boolean`
      The user may delete the mailbox itself. Corresponds to IMAP ACL `x`.
    - **maySubmit**: `Boolean`
      Messages may be submitted directly to this mailbox. Corresponds to IMAP ACL `p`.

- **isSubscribed**: `Boolean`
  Has the user indicated they wish to see this mailbox in their client? This SHOULD default to `false` for mailboxes in shared accounts the user has access to, and `true` for any new mailboxes created by the user themself. This MUST be stored separately per-user where multiple users have access to a shared mailbox.

    A user may have permission to access a large number of shared accounts, or a shared account with a very large set of mailboxes, but only be interested in the contents of a few of these. Clients may choose only to display mailboxes to the user that have the `isSubscribed` property set to `true`, and offer a separate UI to allow the user to see and subscribe/unsubscribe from the full set of mailboxes. However, clients MAY choose to ignore this property, either entirely, for ease of implementation, or just for the primary account (which is normally the user's own, rather than a shared account).

The Trash mailbox (that is a mailbox with `role == "trash"`) MUST be treated specially for the purpose of unread counts:

1. Emails that are **only** in the Trash (and no other mailbox) are ignored when calculating the `unreadThreads` count of other mailboxes.
2. Emails that are **not** in the Trash are ignored when calculating the `unreadThreads` count for the Trash mailbox.

The result of this is that emails in the Trash are treated as though they are in a separate thread for the purposes of unread counts. It is expected that clients will hide emails in the Trash when viewing a thread in another mailbox and vice versa. This allows you to delete a single email to the Trash out of a thread.

So for example, suppose you have an account where the entire contents is a single conversation with 2 emails: an unread email in the Trash and a read email in the Inbox. The `unreadThreads` count would be `1` for the Trash and `0` for the Inbox.

For IMAP compatibility, an email in both the Trash and another mailbox SHOULD be treated by the client as existing in both places (i.e. when emptying the trash, the client SHOULD just remove the Trash mailbox and leave it in the other mailbox).

The following JMAP methods are supported:

## Mailbox/get

Standard "/get" method. The *ids* argument may be `null` to fetch all at once.

## Mailbox/changes

Standard "/changes" method, but with one extra argument to the response:

- **changedProperties**: `String[]|null`
  If only the mailbox counts (unread/total emails/threads) have changed since the old state, this will be the list of properties that may have changed, i.e. `["totalEmails", "unreadEmails", "totalThreads", "unreadThreads"]`. If the server is unable to tell if only counts have changed, it MUST just be `null`.

Since counts frequently change but the rest of the mailboxes state for most use cases changes rarely, the server can help the client optimise data transfer by keeping track of changes to email/thread counts separately to other state changes. The *changedProperties* array may be used directly via a result reference in a subsequent Mailbox/get call in a single request.

## Mailbox/query

Standard "/query" method.

A **FilterCondition** object has the following properties, any of which may be omitted:

- **parentId**: `String|null`
  The Mailbox *parentId* property must match the given value exactly.
- **hasRole**: `Boolean`
  If this is `true`, a Mailbox matches if it has a non-`null` value for its *role* property. If `false`, it must have a `null` *role* value to match.
- **isSubscribed**: `Boolean`
  The `isSubscribed` property of the mailbox must be identical to the value given to match the condition.

A Mailbox object matches the filter if and only if all of the given conditions given match. If zero properties are specified, it is automatically `true` for all objects.

The following properties MUST be supported for sorting:

- `sortOrder`
- `name`
- `parent/name`: This is a pseudo-property, just for sorting, with the
  following semantics: if two mailboxes have a common parent, sort them by name. Otherwise, find the nearest ancestors of each that share a common parent and sort by their names instead. (i.e. This sorts the mailbox list in tree order).

## Mailbox/queryChanges

Standard "/queryChanges" method.

## Mailbox/set

Standard "/set" method, but with the following additional argument:

- **onDestroyRemoveMessages**: `Boolean` (default: false)
  If `false`, attempts to destroy a mailbox that still has any messages in it will be rejected with a `mailboxHasEmail` SetError. If `true`, any messages that were in the mailbox will be removed from it, and if in no other mailboxes will be destroyed when the mailbox is destroyed.

The following extra *SetError* types are defined:

For **destroy**:

- `mailboxHasChild`: The mailbox still has at least one child mailbox. The
  client MUST remove these before it can delete the parent mailbox.
- `mailboxHasEmail`: The mailbox has at least one message assigned to it and
  the *onDestroyRemoveMessages* argument was `false`.

## Example

Fetching all mailboxes in an account:

    [[ "Mailbox/get", {
      "accountId": "u33084183",
      "ids": null
    }, "0" ]]

And response:

    [[ "Mailbox/get", {
      "accountId": "u33084183",
      "state": "78540",
      "list": [
      {
        "id": "23cfa8094c0f41e6",
        "name": "Inbox",
        "parentId": null,
        "role": "inbox",
        "sortOrder": 10,
        "totalEmails": 16307,
        "unreadEmails": 13905,
        "totalThreads": 5833,
        "unreadThreads": 5128,
        "myRights": {
          "mayAddItems": true,
          "mayRename": false,
          "maySubmit": true,
          "mayDelete": false,
          "maySetKeywords": true,
          "mayRemoveItems": true,
          "mayCreateChild": true,
          "maySetSeen": true,
          "mayReadItems": true
        },
        "isSubscribed": true
      },
      {
        "id": "674cc24095db49ce",
        "name": "Important mail",
        ...
      }
      ...
      ],
      "notFound": []
    }, "0" ]]

Now suppose a message is marked read and we get a push update that the Mailbox state has changed. You might fetch the updates like this:

    [[ "Mailbox/changes", {
      "accountId": "u33084183",
      "sinceState": "78540"
    }, "0" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "#ids": {
        "resultOf": "0",
        "name": "Mailbox/changes",
        "path": "/created"
      }
    }, "1" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "#ids": {
        "resultOf": "0",
        "name": "Mailbox/changes",
        "path": "/updated"
      },
      "#properties": {
        "resultOf": "0",
        "name": "Mailbox/changes",
        "path": "/changedProperties"
      }
    }, "2" ]]

This fetches the list of ids for created/updated/destroyed mailboxes, then using back references fetches the data for just the created/updated mailboxes in the same request. The response may look something like this:

    [[ "Mailbox/changes", {
      "accountId": "u33084183",
      "oldState": "78541",
      "newState": "78542",
      "hasMoreChanges": false,
      "changedProperties": [
        "totalEmails", "unreadEmails",
        "totalThreads", "unreadThreads"
      ],
      "created": [],
      "updated": ["23cfa8094c0f41e6"],
      "destroyed": []
    }, "0" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "state": "78542",
      "list": [],
      "notFound": []
    }, "1" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "state": "78542",
      "list": [{
        "id": "23cfa8094c0f41e6",
        "totalEmails": 16307,
        "unreadEmails": 13903,
        "totalThreads": 5833,
        "unreadThreads": 5127
      }],
      "notFound": []
    }, "2" ]]

Here's an example where we try to rename one mailbox and destroy another:

    [[ "Mailbox/set", {
      "accountId": "u33084183",
      "ifInState": "78542",
      "update": {
        "674cc24095db49ce": {
          "name": "Maybe important mail"
        }
      },
      "destroy": [ "23cfa8094c0f41e6" ]
    }, "0" ]]

Suppose the rename succeeds, but we don't have permission to destroy the mailbox we tried to destroy, we might get back:

    [[ "Mailbox/set", {
      "accountId": "u33084183",
      "oldState": "78542",
      "newState": "78549",
      "created": null,
      "notCreated": null,
      "updated": {
          "674cc24095db49ce": null
      },
      "notUpdated": null,
      "destroyed": null,
      "notDestroyed": {
        "23cfa8094c0f41e6": {
          "type": "forbidden"
        }
      }
    }, "0" ]]
