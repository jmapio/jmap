# Mailboxes

A mailbox represents a named set of emails. This is the primary mechanism for organising emails within an account. It is analogous to a folder or a label in other systems. A mailbox may perform a certain role in the system; see below for more details.

For compatibility with IMAP, an email MUST belong to one or more mailboxes. The email id does not change if the email changes mailboxes.

A **Mailbox** object has the following properties:

- **id**: `String` (immutable; server-set)
  The id of the mailbox.
- **name**: `String`
  User-visible name for the mailbox, e.g. "Inbox". This may be any Net-Unicode string ([@!RFC5198]) of at least 1 character in length and maximum 256 bytes in size. Servers SHOULD forbid sibling Mailboxes with the same name. Servers MAY reject names that violate server policy (e.g., names containing slash (/) or control characters).
- **parentId**: `String|null` (default: `null`)
  The mailbox id for the parent of this mailbox, or `null` if this mailbox is at the top level. Mailboxes form acyclic graphs (forests) directed by the child-to-parent relationship. There MUST NOT be a loop.
- **role**: `String|null` (default: `null`)
  Identifies system mailboxes. This property can only be set on create. After the record has been created, this property is immutable.

    The following values MUST be used for the relevant mailboxes:

    - `inbox` – the mailbox to which new mail is delivered by default, unless diverted by a rule or spam filter etc.
    - `archive` – mail the user does not need right now, but does not wish to delete.
    - `drafts` – mail the user is currently writing and are not yet sent.
    - `sent` – mail the user has sent.
    - `trash` – mail the user has deleted.
    - `spam` – mail considered spam by the server.
    - `templates` – drafts which should be used as templates (i.e. used as the basis for creating new drafts).

    No two mailboxes may have the same role. Mailboxes without a known purpose MUST have a role of `null`.

    An account is not required to have mailboxes with any of the above roles. A client MAY create new mailboxes with a role property to help them keep track of a use-case not covered by the above list. To avoid potential conflict with any special behaviour a server might apply to mailboxes with certain roles in the future, any roles not in the above list created by the client must begin with `"x-"`. The client MAY attempt to create mailboxes with the standard roles if not already present, but the server MAY reject these.
- **sortOrder**: `Number` (default: `0`)
  Defines the sort order of mailboxes when presented in the client's UI, so it
  is consistent between devices. The number MUST be an integer in the range
  0 <= sortOrder < 2^31.

    A mailbox with a lower order should be displayed before a mailbox with a higher order (that has the same parent) in any mailbox listing in the client's UI. Mailboxes with equal order SHOULD be sorted in alphabetical order by name. The sorting SHOULD take into account locale-specific character order convention.
- **mayReadItems**: `Boolean` (server-set)
  If true, may use this mailbox as part of a filter in a *Email/query* call.
  If a sub-mailbox is shared but not the parent mailbox, this may be `false`.
- **mayAddItems**: `Boolean` (server-set)
  The user may add mail to this mailbox (by either creating a new email or moving an existing one).
- **mayRemoveItems**: `Boolean` (server-set)
  The user may remove mail from this mailbox (by either changing the mailboxes of an email or deleting it).
- **mayCreateChild**: `Boolean` (server-set)
  The user may create a mailbox with this mailbox as its parent.
- **mayRename**: `Boolean` (server-set)
  The user may rename the mailbox or make it a child of another mailbox.
- **mayDelete**: `Boolean` (server-set)
  The user may delete the mailbox itself.
- **totalEmails**: `Number` (server-set)
  The number of emails in this mailbox.
- **unreadEmails**: `Number` (server-set)
  The number of emails in this mailbox that have neither the `$Seen` keyword nor the `$Draft` keyword.
- **totalThreads**: `Number` (server-set)
  The number of threads where at least one email in the thread is in this mailbox.
- **unreadThreads**: `Number` (server-set)
  The number of threads where at least one email in the thread has neither the `$Seen` keyword nor the `$Draft` keyword AND at least one email in the thread is in this mailbox (but see below for special case handling of Trash). Note, the unread email does not need to be the one in this mailbox.

The Trash mailbox (that is a mailbox with `role == "trash"`) MUST be treated specially for the purpose of unread counts:

1. Emails that are **only** in the Trash (and no other mailbox) are ignored when calculating the `unreadThreads` count of other mailboxes.
2. Emails that are **not** in the Trash are ignored when calculating the `unreadThreads` count for the Trash mailbox.

The result of this is that emails in the Trash are treated as though they are in a separate thread for the purposes of unread counts. It is expected that clients will hide emails in the Trash when viewing a thread in another mailbox and vice versa. This allows you to delete a single email to the Trash out of a thread.

So for example, suppose you have an account where the entire contents is a single conversation with 2 emails: an unread email in the Trash and a read email in the Inbox. The `unreadThreads` count would be `1` for the Trash and `0` for the Inbox.

For IMAP compatibility, an email in both the Trash and another mailbox SHOULD be treated by the client as existing in both places (i.e. when emptying the trash, the client SHOULD just remove the Trash mailbox and leave it in the other mailbox).

The following JMAP methods are supported:

## Mailbox/get

Standard */get* method. The *ids* argument may be `null` to fetch all at once.

## Mailbox/changes

Standard */changes* method, but with one extra argument to the response:

- **changedProperties**: `String[]|null`
  If only the mailbox counts (unread/total emails/threads) have changed since the old state, this will be the list of properties that may have changed, i.e. `["totalEmails", "unreadEmails", "totalThreads", "unreadThreads"]`. If the server is unable to tell if only counts have changed, it MUST just be `null`.

Since counts frequently change but the rest of the mailboxes state for most use cases changes rarely, the server can help the client optimise data transfer by keeping track of changes to email/thread counts separately to other state changes. The *changedProperties* array may be used directly via a result reference in a subsequent Mailboxe/get call in a single request.

## Mailbox/query

Standard */query* method.

The **FilterCondition** object (optionally passed as the *filter* argument) has the following properties, any of which may be omitted:

- **parentId**: `String|null`
  The Mailbox *parentId* property must match the given value exactly.
- **hasRole**: `Boolean`
  If this is `true`, a Mailbox matches if it has a non-`null` value for its *role* property.

A Mailbox object matches the filter if and only if all of the given conditions given match. If zero properties are specified, it is automatically `true` for all objects.

The following properties MUST be supported for sorting:

- `sortOrder`
- `name`

## Mailbox/queryChanges

Standard */queryChanges* method.

## Mailbox/set

Standard */set* method, but with the following additional argument:

- **onDestroyRemoveMessages**: `Boolean` (default: `false`)
  If `false`, attempts to destroy a mailbox that still has any messages in it will be rejected with a `mailboxHasEmail` SetError. If `true`, any messages that were in the mailbox will be removed from it, and if in no other mailboxes will be destroyed when the mailbox is destroyed.

The following extra *SetError* types are defined:

For **destroy**:

- `mailboxHasChild`: The mailbox still has at least one child mailbox. The
  client MUST remove these before it can delete the parent mailbox.
- `mailboxHasEmail`: The mailbox has at least one message assigned to it and
  the *onDestroyRemoveMessages* argument was `false`.
