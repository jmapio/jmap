# MessageSubmissionLists

A **MessageSubmissionList** is a sorted query on the set of MessageSubmission objects in an account. Since it can be very long, the client must specify what section of the list to return. The client can optionally also fetch the, message delivery, message and thread objects for this part of the list.

When the state changes on the server, a delta update can be requested to efficiently update the client's cache of this list to the new state. If the server doesn't support this, the client still only needs to fetch the new list of ids, not refetch all the objects themselves.

## getMessageSubmissionList

To fetch a MessageSubmission list, make a call to *getMessageSubmissionList*. It takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If `null`, the primary account will be used.
- **filter**: `FilterCondition|null`
  Determines the set of MessageSubmission ids returned in the results. See the "Filtering" section below for allowed values and semantics.
- **sort**: `String[]|null`
  A list of MessageSubmission property names to sort by. See the "Sorting" section below for allowed values and semantics.
- **position**: `Number|null`
  The 0-based index of the first result in the list to return, presumed `0` if `null`. If a negative value is given, the call MUST be rejected with an `invalidArguments` error.
- **limit**: `Number|null`
  The maximum number of results to return. If `null`, no limit presumed. The server MAY choose to enforce a maximum `limit` argument. In this case, if a greater value is given (or if it is `null`), the limit should be clamped to the maximum; since the total number of results in the list is returned, the client can determine if it has received all the results. If a negative value is given, the call MUST be rejected with an `invalidArguments` error.
- **fetchMessageSubmissions**: `Boolean|null`
  If `true` then after outputting a *messageSubmissionList* response, an implicit call will be made to *getMessageSubmissions* with the `messageSubmissionIds` array in the response as the *ids* argument. If `false` or `null`, no implicit call will be made.
- **fetchMessageSubmissionProperties**: `String[]|null`
  The list of properties to fetch on any fetched MessageSubmission. See *getMessageSubmissions* for a full description.
- **fetchThreads**: `Boolean|null`
  If `true`, after outputting a *messageSubmissionList* response, an implicit call will be made to *getThreads* with the *threadIds* array in the response as the *ids* argument, and the *fetchMessages* and *fetchMessageProperties* arguments passed straight through from the call to *getMessageList*. If `false` or `null`, no implicit call will be made.
- **fetchMessages**: `Boolean|null`
  If `true` and `fetchThreads == false`, then after outputting a *messageSubmissionList* response, an implicit call will be made to *getMessages* with the `messageIds` array in the response as the *ids* argument, and the *fetchMessageProperties* argument as the *properties* argument. If `false` or `null`, no implicit call will be made.
- **fetchMessageProperties**: `String[]|null`
  The list of properties to fetch on any fetched messages. See *getMessages* for a full description.

### Filtering

A **FilterCondition** object has the following properties:

- **messageIds**: `String[]|null`
  The MessageSubmission *messageId* property must be in this list to match the
  condition.
- **threadIds**: `String[]|null`
  The MessageSubmission *threadId* property must be in this list to match the
  condition.
- **undoStatus**: `String|null`
  The MessageSubmission *undoStatus* property must be identical to the value given to match the condition.
- **before**: `Date|null`
  The *sendAt* property of the MessageSubmission object must be before this date to match the condition.
- **after**: `Date|null`
  The *sendAt* property of the MessageSubmission object must be after this date to match the condition.

A MessageSubmission object matches the filter if and only if all of the conditions given match.

### Sorting

The `sort` argument lists the properties to compare between two objects to determine which comes first in the sort. If two objects have an identical value for the first property, the next property will be considered and so on. If all properties are the same (this includes the case where an empty array or `null` is given as the argument), the sort order is server-dependent, but MUST be stable between calls to `getMessageSubmissionList`.

Following the property name there MUST be a space and then either the string `asc` or `desc` to specify ascending or descending sort for that property.

The following properties MUST be supported for sorting:

- `messageId`
- `threadId`
- `sentAt`

### Windowing

To paginate the results the client MAY supply a *position* argument: this is the 0-based index of the first result to return in the list of objects after filtering and sorting. If the index is greater than or equal to the total number of objects in the list, then there are no results to return, but this DOES NOT generate an error. If `null`, this defaults to `0`.

### Response

The response to a call to *getMessageSubmissionList* is called *messageSubmissionList*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for the call.
- **filter**: `FilterCondition|null`
  The filter for the query. Echoed back from the call.
- **sort**: `String[]|null`
  A list of MessageSubmission property names used to sort by. Echoed back from the call.
- **state**: `String`
  A string encoding the current state on the server. This string will change if the results of the list MAY have changed (for example, there has been a change to the state of the set of MessageSubmission objects; it does not guarantee that anything in the list has changed). It may be passed to *getMessageSubmissionListUpdates* to efficiently get the set of changes from the previous state.

    Should a client receive back a response with a different state string to a previous call, it MUST either throw away the currently cached list and fetch it again (note, this does not require fetching the objects again, just the list of ids) or, if the server supports it, call *getMessageSubmissionListUpdates* to get the delta difference.
- **canCalculateUpdates**: `Boolean`
  This is `true` if the server supports calling `getMessageSubmissionListUpdates` with these `filter`/`sort` parameters. Note, this does not guarantee that the getMessageSubmissionListUpdates call will succeed, as it may only be possible for a limited time afterwards due to server internal implementation details.
- **position**: `Number`
  The 0-based index of the first result in the `messageSubmissionIds` array within the complete list.
- **total**: `Number`
  The total number of objects in the list (given the *filter* argument).
- **messageSubmissionIds**: `String[]`
  The list of MessageSubmission ids for each MessageSubmission object in the list after filtering and sorting, starting at the index given by the *position* argument of this response, and continuing until it hits the end of the list or reaches the `limit` number of ids.
- **threadIds**: `String[]`
  The *threadId* property on the MessageSubmission object referenced by the id at the corresponding index in the *messageSubmissionIds* response argument.
- **messageIds**: `String[]`
  The *messageId* property on the MessageSubmission object referenced by the id at the corresponding index in the *messageSubmissionIds* response argument.

The following errors may be returned instead of the `messageSubmissionList` response:

`invalidArguments`: Returned if the request does not include one of the required arguments, or one of the arguments is of the wrong type, or otherwise invalid.

### getMessageSubmissionListUpdates

The `getMessageSubmissionListUpdates` call allows a client to efficiently update the state of any cached MessageSubmission list to match the new state on the server. It takes the following arguments:

- **filter**: `FilterCondition`
  The filter argument that was used with *getMessageSubmissionList*.
- **sort**: `String[]|null`
  The sort argument that was used with *getMessageSubmissionList*.
- **sinceState**: `String`
  The current state of the client. This is the string that was returned as the *state* argument in the *messageSubmissionList* response. The server will return the changes made since this state.
- **maxChanges**: `Number|null`
  The maximum number of changes to return in the response. See below for a more detailed description.

The response to *getMessageSubmissionListUpdates* is called *messageSubmissionListUpdates* It has the following arguments:

- **filter**: `FilterCondition`
  The filter of the MessageSubmission list. Echoed back from the call.
- **sort**: `String[]|null`
  A list of MessageSubmission property names used to sort by. Echoed back from the call.
- **oldState**: `String`
  This is the `sinceState` argument echoed back; the state from which the server is returning changes.
- **newState**: `String`
  This is the state the client will be in after applying the set of changes to the old state.
- **total**: `Number`
  The total number of MessageSubmission objects in the current MessageSubmission list (given the *filter*).
- **removed**: `String[]`
  The MessageSubmission id for every MessageSubmission that was in the list in the old state and is not in the list in the new state. If the server cannot calculate this exactly, the server MAY return extra ids in addition that MAY have been in the old list but are not in the new list.

    If the *filter* or *sort* includes a mutable property, the server MUST include all MessageSubmission objects in the current list for which this property MAY have changed.

- **added**: `AddedItem[]`
  The MessageSubmission id and index in the list (in the new state) for every MessageSubmission that has been added to the list since the old state AND every MessageSubmission in the current list that was included in the *removed* array (due to a filter or sort based upon a mutable property). The array MUST be sorted in order of index, lowest index first.

    An **AddedItem** object has the following properties:

    - **id**: `String`
    - **index**: `Number`

The following errors may be returned instead of the `MessageSubmissionListUpdates` response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNotSupportedByMethod`: Returned if the *accountId* given corresponds to a valid account, but the account does not support this data type.

`invalidArguments`: Returned if the request does not include one of the required arguments, or one of the arguments is of the wrong type, or otherwise invalid. A *description* property MAY be present on the response object to help debug with an explanation of what the problem was.

`tooManyChanges`: Returned if there are more changes the the client's *maxChanges* argument. Each item in the removed or added array is considered as one change. The client may retry with a higher max changes or invalidate its cache of the MessageSubmission list.

`cannotCalculateChanges`: Returned if the server cannot calculate the changes from the state string given by the client. Usually due to the client's state being too old. The client MUST invalidate its cache of the MessageSubmission list.
