# Email submission

An **EmailSubmission** object represents the submission of an email for delivery to one or more recipients. It has the following properties:

- **id**: `String` (immutable; server-set)
  The id of the email submission.
- **identityId**: `String` (immutable)
  The id of the identity to associate with this submission.
- **emailId**: `String` (immutable)
  The id of the email to send. The email being sent does not have to be a draft, for example when "redirecting" an existing email to a different address.
- **threadId**: `String` (immutable; server-set)
  The thread id of the email to send. This is set by the server to the *threadId* property of the email referenced by the *emailId*.
- **envelope**: `Envelope|null` (immutable; default: `null`)
  Information for use when sending via SMTP.

    An **Envelope** object has the following properties:

    - **mailFrom**: `Address`
      The email address to use as the return address in the SMTP submission, plus any parameters to pass with the MAIL FROM address. The JMAP server MAY allow the address to be the empty string.

        When a JMAP server performs an SMTP message submission, it MAY use the
        same id string for the [@!RFC3461] ENVID parameter and the
        EmailSubmission object id. Servers that do this MAY replace a
        client-provided value for ENVID with a server-provided value.

    - **rcptTo**: `Address[]`
      The email addresses to send the message to, and any RCPT TO parameters to pass with the recipient.

    An **Address** object has the following properties:

    - **email**: `String`
      The email address being represented by the object. This as a "Mailbox" as used in the Reverse-path or Forward-path of the MAIL FROM or RCPT TO command in [@!RFC5321].
    - **parameters**: `Object|null`
      Any parameters to send with the email (either mail-parameter or rcpt-parameter as appropriate, as specified in [@!RFC5321]). If supplied, each key in the object is a parameter name, and the value either the parameter valueÂ (type `String`) or if the parameter does not take a value then `null`. For both name and value, any xtext or unitext encodings are removed ([@!RFC3461], [@!RFC6533]) and JSON string encoding applied.

    If the *envelope* property is `null` or omitted on creation, the server MUST generate this from the referenced email as follows:

    - **mailFrom**: The email in the *Sender* header, if present, otherwise
      the *From* header, if present, and no parameters.

        If multiple addresses are present in one of these headers, or there is more than one *Sender*/*From* header, the server SHOULD reject the email as invalid but otherwise MUST take the first address in the last *Sender*/*From* header in the [@!RFC5322] version of the message.

        If the address found from this is not allowed by the identity associated with this submission, the *email* property from the identity MUST be used instead.

    - **rcptTo**: The deduplicated set of email addresses from the *To*, *Cc*
      and *Bcc* headers, if present, with no parameters for any of them.

- **sendAt**: `UTCDate` (immutable; server-set)
  The date the email was/will be released for delivery.

    If the client successfully used [@!RFC4865] FUTURERELEASE with the email, this MUST be the time when the server will release the email; otherwise it MUST be the time the EmailSubmission was created.

- **undoStatus**: `String` (server-set)
  This represents whether the submission may be canceled. This is server set and MUST be one of the following values:

    - `pending`: It MAY be possible to cancel this submission.
    - `final`: The email has been relayed to at least one recipient in a
      manner that cannot be recalled. It is no longer possible to cancel this
      submission.
    - `canceled`: The email submission was canceled and will not be delivered
      to any recipient.

    On systems that do not support unsending, the value of this property will always be `final`. On systems that do support canceling submission, it will start as `pending`, and MAY transition to `final` when the server knows it definitely cannot recall the email, but MAY just remain `pending`. If in pending state, a client can attempt to cancel the submission by setting this property to `canceled`; if the update succeeds, the submission was successfully canceled and the email has not been delivered to any of the original recipients.

- **deliveryStatus**: `String[DeliveryStatus]|null` (server-set)
  This represents the delivery status for each of the email's recipients, if known. This property MAY not be supported by all servers, in which case it will remain `null`. Servers that support it SHOULD update the EmailSubmission object each time the status of any of the recipients changes, even if some recipients are still being retried.

    This value is a map from the email address of each recipient to a *DeliveryStatus* object.

    A **DeliveryStatus** object has the following properties:

    - **smtpReply**: `String`
      The SMTP reply string returned for this recipient when the server last tried to relay the email, or in a later DSN response for the email. This SHOULD be the response to the RCPT TO stage, unless this was accepted and the email as a whole rejected at the end of the DATA stage, in which case the DATA stage reply SHOULD be used instead.

        Multi-line SMTP responses should be concatenated to a single string as follows:

        - The hyphen following the SMTP code on all but the last line is
          replaced with a space.
        - Any prefix in common with the first line is stripped from lines after
          the first.
        - CRLF is replaced by a space.

        For example:

            550-5.7.1 Our system has detected that this message is
            550 5.7.1 likely spam, sorry.

        would become:

            550 5.7.1 Our system has detected that this message is likely spam, sorry.

        For emails relayed via an alternative to SMTP, the server MAY generate a synthetic string representing the status instead. If it does this, the string MUST be of the following form:

        - A 3-digit SMTP reply code, as defined in [@!RFC5321], section 4.2.3.
        - Then a single space character.
        - Then an SMTP Enhanced Mail System Status Code as defined in
          [@!RFC3463], with a registry defined in [@!RFC5248].
        - Then a single space character.
        - Then an implementation-specific information string with a human
          readable explanation of the response.

    - **delivered**: `String`
      Represents whether the email has been successfully delivered to the recipient. This MUST be one of the following values:

        - `queued`: The email is in a local mail queue and status will change
          once it exits the local mail queues. The *smtpReply* property may still change.
        - `yes`: The email was successfully delivered to the mailbox of the
          recipient. The *smtpReply* property is final.
        - `no`: Delivery to the recipient permanently failed. The *smtpReply*
          property is final.
        - `unknown`: The final delivery status is unknown, (e.g. it was relayed
          to an external machine and no further information is available). The *smtpReply* property may still change if a DSN arrives.

        Note, successful relaying to an external SMTP server SHOULD NOT be taken as an indication that the email has successfully reached the final mailbox. In this case though, the server MAY receive a DSN response, if requested.

        If a DSN is received for the recipient with Action equal to "delivered", as per [@!RFC3464] section 2.3.3, then the *delivered* property SHOULD be set to `yes`; if the Action equals "failed", the property SHOULD be set to `no`. Receipt of any other DSN SHOULD NOT affect this property.

        The server MAY also set this property based on other feedback channels.

    - **displayed**: `String`
      Represents whether the email has been displayed to the recipient. This MUST be one of the following values:

        - `unknown`: The display status is unknown. This is the initial value.
        - `yes`: The recipient's system claims the email content has been
          displayed to the recipient. Note, there is no guarantee that the recipient has noticed, read, or understood the content.

        If an MDN is received for this recipient with Disposition-Type (as per [@!RFC3798] section 3.2.6.2) equal to "displayed", this property SHOULD be set to `yes`.

        The server MAY also set this property based on other feedback channels.

- **dsnBlobIds**: `String[]` (server-set)
  A list of blob ids for DSNs received for this submission, in order of receipt, oldest first.
- **mdnBlobIds**: `String[]` (server-set)
  A list of blob ids for MDNs received for this submission, in order of receipt, oldest first.

JMAP servers MAY choose not to expose DSN and MDN responses as Email objects if they correlate to a EmailSubmission object. It SHOULD only do this if it exposes them in the *dsnBlobIds* and *mdnblobIds* fields instead, and expects the user to be using clients capable of fetching and displaying delivery status via the EmailSubmission object.

For efficiency, a server MAY destroy EmailSubmission objects a certain amount of time after the email is successfully sent or it has finished retrying sending the email. For very basic SMTP proxies, this MAY be immediately after creation, as it has no way to assign a real id and return the information again if fetched later.

The following JMAP methods are supported:

## EmailSubmission/get

Standard */get* method.

## EmailSubmission/changes

Standard */changes* method.

## EmailSubmission/query

Standard */query* method.

A **FilterCondition** object has the following properties, any of which may be omitted:

- **emailIds**: `String[]`
  The EmailSubmission *emailId* property must be in this list to match the
  condition.
- **threadIds**: `String[]`
  The EmailSubmission *threadId* property must be in this list to match the
  condition.
- **undoStatus**: `String`
  The EmailSubmission *undoStatus* property must be identical to the value given to match the condition.
- **before**: `UTCDate`
  The *sendAt* property of the EmailSubmission object must be before this date to match the condition.
- **after**: `UTCDate`
  The *sendAt* property of the EmailSubmission object must be after this date to match the condition.

A EmailSubmission object matches the filter if and only if all of the given conditions given match. If zero properties are specified, it is automatically `true` for all objects.

The following properties MUST be supported for sorting:

- `emailId`
- `threadId`
- `sentAt`

## EmailSubmission/queryChanges

Standard */queryChanges* method.

## EmailSubmission/set

Standard */set* method, with the following two extra arguments:

- **onSuccessUpdateEmail**: `String[Email]|null`
  A map of *EmailSubmission id* to an object containing properties to update on the Email object referenced by the EmailSubmission if the create/update/destroy succeeds. (For references to EmailSubmission creations, this is equivalent to a back reference so the id will be the creation id prefixed with a `#`.)
- **onSuccessDestroyEmail**: `String[]|null`
  A list of *EmailSubmission ids* for which the email with the corresponding emailId should be destroyed if the create/update/destroy succeeds. (For references to EmailSubmission creations, this is equivalent to a back reference so the id will be the creation id prefixed with a `#`.)

A single implicit *Email/set* call MUST be made after all EmailSubmission create/update/destroy requests have been processed to perform any changes requested in these two arguments. The response to this MUST be returned after the *EmailSubmission/set* response.

An email is sent by creating a EmailSubmission object. When processing each create, the server must check that the email is valid, and the user has sufficient authorization to send it. If the creation succeeds, the email will be sent to the recipients given in the envelope *rcptTo* parameter. The server MUST remove any *Bcc* header present on the email during delivery. The server MAY add or remove other headers from the submitted email, or make further alterations in accordance with the server's policy during delivery.

If the referenced email is destroyed at any point after the EmailSubmission object is created, this MUST NOT change the behaviour of the email submission (i.e. it does not cancel a future send).

Similarly, destroying a EmailSubmission object MUST NOT affect the deliveries it represents. It purely removes the record of the email submission. The server MAY automatically destroy EmailSubmission objects after a certain time or in response to other triggers, and MAY forbid the client from manually destroying EmailSubmission objects.

The following extra *SetError* types are defined:

For **create**:

- `tooLarge` - The email size is larger than the server supports sending.
   A *maxSize* `Number` property MUST be present on the SetError specifying the maximum size of an email that may be sent, in octets.
- `tooManyRecipients` - The envelope (supplied or generated) has more
  recipients than the server allows. A *maxRecipients* `Number` property MUST be present on the SetError specifying the maximum number of allowed recipients.
- `noRecipients` âÂ The envelope (supplied or generated) does not have any
  rcptTo emails.
- `invalidRecipients` âÂ The *rcptTo* property of the envelope (supplied or
  generated) contains at least one rcptTo value which is not a valid email
  for sending to. An *invalidRecipients* `String[]` property MUST be present on the SetError, which is a list of the invalid addresses.
- `forbiddenFrom` âÂ The server does not permit the user to send an email
  with the From header of the email to be sent.
- `forbiddenToSend` âÂ The user does not have permission to send at all right
  now for some reason. A *description* `String` property MAY be present on the SetError object to display to the user why they are not permitted. The server MAY choose to localise this string into the user's preferred language, if known.
- `emailNotFound` - The *emailId* is not a valid id for an email in the
  account.
- `invalidEmail` - The email to be sent is invalid in some way. The
  SetError SHOULD contain a property called *properties* of type `String[]` that lists **all** the properties of the email that were invalid.

For **update**:

- `cannotUnsend`: The client attempted to update the *undoStatus* of a valid
  EmailSubmission object from `pending` to `canceled`, but the email cannot be unsent.
