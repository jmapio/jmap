# Quota

The quota is an object that displays the limit set to an account usage as well as the current usage in regard to that limit.

The quota object MUST contain the following fields:

* **id**: `Id` The unique identifier for this object. It should respect the JMAP ID datatype defined in section 1.2 of [@!RFC8620]

* **resourceType**: `ResourceType` The resource type of the quota.

* **used**: `UnsignedInt` The current usage of the defined quota. Computation of this value is handled by the server.

* **limit**: `UnsignedInt` The hard limit set by this quota. Objects in scope may not be created or updated if we reach this limit. It should be higher than the `warnLimit` and the `softLimit`.

* **scope**: `Scope` The `Scope` of this quota.

* **name**: `String` The name of the quota object. Useful for managing quotas and use queries for searching.

* **datatypes**: `String[]` A list of all the data types values that are applying to this quota. This allows to assign
quotas to separated or shared data types. This MAY include data types the client does not recognise. Clients MUST
ignore any unknown data type in the list.

The quota object MAY contain the following field:

* **warnLimit**: `UnsignedInt|null` The warn limit set by this quota object. It can be used to send a warning to an
entity about to reach the hard limit soon, but with no action taken yet. If set, it should be lower than the
`softLimit` and the `limit`.

* **softLimit**: `UnsignedInt|null` The soft limit set by this quota object. It can be used to still allow some operations,
but refusing some others. What is allowed or not is up to the server. For example, it could be used for blocking outgoing
events of an entity (sending emails, creating calendar events, ...) while still receiving incoming events (receiving emails,
receiving calendars events, ...). If set, it should be higher than the `warnLimit` but lower than the `limit`.

* **description**: `String|null` Arbitrary free, human readable, description of this quota. Might be used to explain
where the limit comes from and explain the entities and data types this quota applies to.

## Quota/get

Standard “/get” method as described in [@!RFC8620] section 5.1. The ids argument may be `null` to fetch all at once.

## Quota/changes

Standard “/changes” method as described in [@!RFC8620] section 5.2 but with one extra argument to the response:

* **updatedProperties**: `String[]|null` If only the “used” Quota properties has changed since the old state, this
will be the list of properties that may have changed. If the server is unable to tell if only "used" has changed, it
MUST just be null.

Since "used" frequently changes but other properties are generally only changed rarely, the server can help the client
optimise data transfer by keeping track of changes to Quota usage separate from other state changes. The
updatedProperties array may be used directly via a back-reference in a subsequent Quota/get call in the same request,
so only these properties are returned if nothing else has changed.

Servers MAY decide to add other properties to the list that they judge changing frequently.

## Quota/query

This is a standard “/query” method as described in [@!RFC8620], Section 5.5.

A **FilterCondition** object has the following properties, any of which may be omitted:

* **name**: `String` The Quota _name_ property contains the given string.
* **scopes**: `Scope[]` The Quota _scope_ property must be in this list to match the condition.
* **resourceTypes**: `ResourceType[]` The Quota _resourceType_ property must be in this list to match the condition.
* **datatypes**: `String[]` The Quota _datatypes_ property must contain the elements in this list to match the condition.

A Quota object matches the FilterCondition if and only if all of the given conditions match. If zero properties are
specified, it is automatically true for all objects.

The following Quota properties MUST be supported for sorting:

* **name**
* **used**

## Quota/queryChanges

This is a standard “/queryChanges” method as described in [@!RFC8620], Section 5.6.

## Examples

### Fetching quotas

Request fetching all quotas related to an account :

    [[ "Quota/get", {
      "accountId": "u33084183",
      "ids": null
    }, "0" ]]

With response :

    [[ "Quota/get", {
      "accountId": "u33084183",
      "state": "78540",
      "list": [{
        "id": "2a06df0d-9865-4e74-a92f-74dcc814270e",
        "resourceType": "count",
        "used": 1056,
        "warnLimit": 1600,
        "softLimit": 1800,
        "limit": 2000,
        "scope": "account",
        "name": "bob@example.com",
        "description": "Personal account usage",
        "datatypes" : [ "Mail", "Calendar", "Contact" ]
      }, {
        "id": "3b06df0e-3761-4s74-a92f-74dcc963501x",
        "resourceType": "octets",
        ...
      }, ...],
      "notFound": []
    }, "0" ]]

### Requesting latest quota changes

Request fetching the changes for a specific quota:

    [[ "Quota/changes", {
      "accountId": "u33084183",
      "sinceState": "10824",
      "maxChanges": 20,
      "updatedProperties": ["used"]
    }, "0" ],
    [ "Quota/get", {
      "accountId": "u33084183",
      "#ids": {
        "resultOf": "0",
        "name": "Quota/changes",
        "path": "/updated"
      },
      "#properties": {
        "resultOf": "0",
        "name": "Quota/changes",
        "path": "/updatedProperties"
      }
    }, "1" ]]

With response:

    [[ "Quota/changes", {
      "accountId": "u33084183",
      "oldState": "10824",
      "newState": "10826",
      "hasMoreChanges": false,
      "created": [],
      "updated": ["2a06df0d-9865-4e74-a92f-74dcc814270e"],
      "destroyed": []
    }, "0" ],
    [ "Quota/get", {
      "accountId": "u33084183",
      "state": "10826",
      "list": [{
        "id": "2a06df0d-9865-4e74-a92f-74dcc814270e",
        "used": 1246
      }],
      "notFound": []
    }, "1" ]]
