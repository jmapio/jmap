# Quota

The quota is an object that displays the limit set to an account usage. It then shows as well the current usage in regard to that limit.

## Properties of the quota object

The quota object MUST contain the following fields:

* id: "Id"
  
  The unique identifier for this object.

* resourceType: "ResourceType"
  
  The resource type of the quota as defined in (#resourcetype).

* used: "UnsignedInt"
  
  The current usage of the defined quota, using the "resourceType" defined as unit of measure.
Computation of this value is handled by the server.

* hardLimit: "UnsignedInt"
  
  The hard limit set by this quota, using the "resourceType" defined as unit of measure. Objects 
in scope may not be created or updated if this limit is reached.

* scope: "Scope" 
  
  The "Scope" of this quota as defined in (#scope).

* name: "String" 
  
  The name of the quota object. Useful for managing quotas and using queries for searching.

* dataTypes: "String[]"
  
  A list of all the type names (e.g., Email, Calendar, etc.) to which this quota applies. 
This allows to assign quotas to distinct or shared data types. This MAY include data types the client does not recognise. 
Clients MUST ignore any unknown data type in the list.

The quota object MAY contain the following fields:

* warnLimit: "UnsignedInt|null" 
  
  The warn limit set by this quota object, using the "resourceType" defined as unit of measure. 
It can be used to send a warning to an entity about to reach the hard limit soon, but with no action taken yet. If set, it 
SHOULD be lower than the "softLimit" (if present and different from null) and the "hardLimit".

* softLimit: "UnsignedInt|null" 
  
  The soft limit set by this quota object, using the "resourceType" defined as unit of measure.
It can be used to still allow some operations, but refuse some others. What is allowed or not is up to the server. For example, it
could be used for blocking outgoing events of an entity (sending emails, creating calendar events, ...) while still receiving
incoming events (receiving emails, receiving calendars events, ...). If set, it SHOULD be higher than the "warnLimit" 
(if present and different from null) but lower than the "hardLimit".

* description: "String|null" 
  
  Arbitrary free, human-readable, description of this quota. It might be used to explain
where the different limits come from and explain the entities and data types this quota applies to. The description MUST be 
encoded in UTF-8 [@!RFC3629] as described in [@!RFC8620] section 1.5, selected based on an Accept-Language header in the request
(as defined in [@!RFC9110], Section 12.5.4) or out-of-band information about the user's language/locale.

The following JMAP methods are supported.

## Quota/get

Standard "/get" method as described in [@!RFC8620] section 5.1. The *ids* argument may be "null" to fetch all Quotas of the account 
at once, as demonstrated in this document in (#fetching-quotas).

## Quota/changes

Standard "/changes" method as described in [@!RFC8620] section 5.2 but with one extra argument in the response:

* updatedProperties: "String[]|null" 
  
  If only the "used" Quota property has changed since the old state, this
will be a list containing only that property. If the server is unable to tell if only "used" has changed, it
MUST be null.

Since "used" frequently changes but other properties are generally only changed rarely, the server can help the client
optimise data transfer by keeping track of changes to Quota usage separate from other state changes. The
updatedProperties array may be used directly via a back-reference in a subsequent Quota/get call in the same request,
so only these properties are returned if nothing else has changed.

Servers MAY decide to add other properties to the list that they judge to be changing frequently.

This method's usage is demonstrated in this document at (#requesting-latest-quota-changes).

## Quota/query

This is a standard "/query" method as described in [@!RFC8620], Section 5.5.

A **FilterCondition** object has the following properties, any of which may be included or  omitted:

* name: "String" 
  
  The Quota _name_ property contains the given string.

* scope: "Scope" 
  
  The Quota _scope_ property must match the given value exactly.

* resourceType: "ResourceType" 
  
  The Quota _resourceType_ property must match the given value exactly.

* dataTypes: "String[]" 
  
  The Quota _dataTypes_ property must contain the elements in this list to match the condition.

A Quota object matches the FilterCondition if and only if all the given conditions
match, including multiple array elements existing within a condition. If zero properties are
specified, it is automatically true for all objects.

The following Quota properties MUST be supported for sorting:

* name
* used

## Quota/queryChanges

This is a standard "/queryChanges" method as described in [@!RFC8620], Section 5.6.

# Examples

## Fetching quotas

Request fetching all quotas related to an account :

    [[ "Quota/get", {
      "accountId": "u33084183",
      "ids": null
    }, "0" ]]

With response :

    [[ "Quota/get", {
      "accountId": "u33084183",
      "state": "78540",
      "list": [{
        "id": "2a06df0d-9865-4e74-a92f-74dcc814270e",
        "resourceType": "count",
        "used": 1056,
        "warnLimit": 1600,
        "softLimit": 1800,
        "hardLimit": 2000,
        "scope": "account",
        "name": "bob@example.com",
        "description": "Personal account usage. When the soft limit is reached, the user is not allowed to send mails or create contacts and calendar events anymore.",
        "dataTypes" : [ "Mail", "Calendar", "Contact" ]
      }, {
        "id": "3b06df0e-3761-4s74-a92f-74dcc963501x",
        "resourceType": "octets",
        ...
      }, ...],
      "notFound": []
    }, "0" ]]

## Requesting latest quota changes

Request fetching the changes for a specific quota:

    [[ "Quota/changes", {
      "accountId": "u33084183",
      "sinceState": "78540",
      "maxChanges": 20
    }, "0" ],
    [ "Quota/get", {
      "accountId": "u33084183",
      "#ids": {
        "resultOf": "0",
        "name": "Quota/changes",
        "path": "/updated"
      },
      "#properties": {
        "resultOf": "0",
        "name": "Quota/changes",
        "path": "/updatedProperties"
      }
    }, "1" ]]

With response:

    [[ "Quota/changes", {
      "accountId": "u33084183",
      "oldState": "78540",
      "newState": "78542",
      "hasMoreChanges": false,
      "updatedProperties": ["used"],
      "created": [],
      "updated": ["2a06df0d-9865-4e74-a92f-74dcc814270e"],
      "destroyed": []
    }, "0" ],
    [ "Quota/get", {
      "accountId": "u33084183",
      "state": "10826",
      "list": [{
        "id": "2a06df0d-9865-4e74-a92f-74dcc814270e",
        "used": 1246
      }],
      "notFound": []
    }, "1" ]]

# Push

Servers MUST support the JMAP push mechanisms, as specified in [@!RFC8620] Section 7, to allow clients to receive 
notifications when the state changes for the Quota type defined in this specification.
